#pragma once 

#include <windows.h>
#include <inttypes.h>

#ifdef __cplusplus
extern "C"
{
#endif

#pragma region OpenGL types
	typedef unsigned int GLenum;
	typedef unsigned char GLboolean;
	typedef unsigned int GLbitfield;
	typedef void GLvoid;
	typedef int8_t GLbyte;
	typedef uint8_t GLubyte;
	typedef int16_t GLshort;
	typedef uint16_t GLushort;
	typedef int GLint;
	typedef unsigned int GLuint;
	typedef int32_t GLclampx;
	typedef int GLsizei;
	typedef float GLfloat;
	typedef float GLclampf;
	typedef double GLdouble;
	typedef double GLclampd;
	typedef void* GLeglClientBufferEXT;
	typedef void* GLeglImageOES;
	typedef char GLchar;
	typedef char GLcharARB;
	typedef unsigned int GLhandleARB;
	typedef uint16_t GLhalf;
	typedef uint16_t GLhalfARB;
	typedef int32_t GLfixed;
	typedef intptr_t GLintptr;
	typedef intptr_t GLintptrARB;
	typedef long long int GLsizeiptr;
	typedef long long int GLsizeiptrARB;
	typedef int64_t GLint64;
	typedef int64_t GLint64EXT;
	typedef uint64_t GLuint64;
	typedef uint64_t GLuint64EXT;
	typedef struct __GLsync* GLsync;
#pragma endregion

#pragma region OpenGL defines
#define GL_DEPTH_BUFFER_BIT 0x00000100
#define GL_STENCIL_BUFFER_BIT 0x00000400
#define GL_COLOR_BUFFER_BIT 0x00004000
#define GL_FALSE 0
#define GL_TRUE 1
#define GL_POINTS 0x0000
#define GL_LINES 0x0001
#define GL_LINE_LOOP 0x0002
#define GL_LINE_STRIP 0x0003
#define GL_TRIANGLES 0x0004
#define GL_TRIANGLE_STRIP 0x0005
#define GL_TRIANGLE_FAN 0x0006
#define GL_NEVER 0x0200
#define GL_LESS 0x0201
#define GL_EQUAL 0x0202
#define GL_LEQUAL 0x0203
#define GL_GREATER 0x0204
#define GL_NOTEQUAL 0x0205
#define GL_GEQUAL 0x0206
#define GL_ALWAYS 0x0207
#define GL_ZERO 0
#define GL_ONE 1
#define GL_SRC_COLOR 0x0300
#define GL_ONE_MINUS_SRC_COLOR 0x0301
#define GL_SRC_ALPHA 0x0302
#define GL_ONE_MINUS_SRC_ALPHA 0x0303
#define GL_DST_ALPHA 0x0304
#define GL_ONE_MINUS_DST_ALPHA 0x0305
#define GL_DST_COLOR 0x0306
#define GL_ONE_MINUS_DST_COLOR 0x0307
#define GL_SRC_ALPHA_SATURATE 0x0308
#define GL_NONE 0
#define GL_FRONT_LEFT 0x0400
#define GL_FRONT_RIGHT 0x0401
#define GL_BACK_LEFT 0x0402
#define GL_BACK_RIGHT 0x0403
#define GL_FRONT 0x0404
#define GL_BACK 0x0405
#define GL_LEFT 0x0406
#define GL_RIGHT 0x0407
#define GL_FRONT_AND_BACK 0x0408
#define GL_NO_ERROR 0
#define GL_INVALID_ENUM 0x0500
#define GL_INVALID_VALUE 0x0501
#define GL_INVALID_OPERATION 0x0502
#define GL_OUT_OF_MEMORY 0x0505
#define GL_CW 0x0900
#define GL_CCW 0x0901
#define GL_POINT_SIZE 0x0B11
#define GL_POINT_SIZE_RANGE 0x0B12
#define GL_POINT_SIZE_GRANULARITY 0x0B13
#define GL_LINE_SMOOTH 0x0B20
#define GL_LINE_WIDTH 0x0B21
#define GL_LINE_WIDTH_RANGE 0x0B22
#define GL_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_POLYGON_MODE 0x0B40
#define GL_POLYGON_SMOOTH 0x0B41
#define GL_CULL_FACE 0x0B44
#define GL_CULL_FACE_MODE 0x0B45
#define GL_FRONT_FACE 0x0B46
#define GL_DEPTH_RANGE 0x0B70
#define GL_DEPTH_TEST 0x0B71
#define GL_DEPTH_WRITEMASK 0x0B72
#define GL_DEPTH_CLEAR_VALUE 0x0B73
#define GL_DEPTH_FUNC 0x0B74
#define GL_STENCIL_TEST 0x0B90
#define GL_STENCIL_CLEAR_VALUE 0x0B91
#define GL_STENCIL_FUNC 0x0B92
#define GL_STENCIL_VALUE_MASK 0x0B93
#define GL_STENCIL_FAIL 0x0B94
#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
#define GL_STENCIL_REF 0x0B97
#define GL_STENCIL_WRITEMASK 0x0B98
#define GL_VIEWPORT 0x0BA2
#define GL_DITHER 0x0BD0
#define GL_BLEND_DST 0x0BE0
#define GL_BLEND_SRC 0x0BE1
#define GL_BLEND 0x0BE2
#define GL_LOGIC_OP_MODE 0x0BF0
#define GL_DRAW_BUFFER 0x0C01
#define GL_READ_BUFFER 0x0C02
#define GL_SCISSOR_BOX 0x0C10
#define GL_SCISSOR_TEST 0x0C11
#define GL_COLOR_CLEAR_VALUE 0x0C22
#define GL_COLOR_WRITEMASK 0x0C23
#define GL_DOUBLEBUFFER 0x0C32
#define GL_STEREO 0x0C33
#define GL_LINE_SMOOTH_HINT 0x0C52
#define GL_POLYGON_SMOOTH_HINT 0x0C53
#define GL_UNPACK_SWAP_BYTES 0x0CF0
#define GL_UNPACK_LSB_FIRST 0x0CF1
#define GL_UNPACK_ROW_LENGTH 0x0CF2
#define GL_UNPACK_SKIP_ROWS 0x0CF3
#define GL_UNPACK_SKIP_PIXELS 0x0CF4
#define GL_UNPACK_ALIGNMENT 0x0CF5
#define GL_PACK_SWAP_BYTES 0x0D00
#define GL_PACK_LSB_FIRST 0x0D01
#define GL_PACK_ROW_LENGTH 0x0D02
#define GL_PACK_SKIP_ROWS 0x0D03
#define GL_PACK_SKIP_PIXELS 0x0D04
#define GL_PACK_ALIGNMENT 0x0D05
#define GL_MAX_TEXTURE_SIZE 0x0D33
#define GL_MAX_VIEWPORT_DIMS 0x0D3A
#define GL_SUBPIXEL_BITS 0x0D50
#define GL_TEXTURE_1D 0x0DE0
#define GL_TEXTURE_2D 0x0DE1
#define GL_TEXTURE_WIDTH 0x1000
#define GL_TEXTURE_HEIGHT 0x1001
#define GL_TEXTURE_BORDER_COLOR 0x1004
#define GL_DONT_CARE 0x1100
#define GL_FASTEST 0x1101
#define GL_NICEST 0x1102
#define GL_BYTE 0x1400
#define GL_UNSIGNED_BYTE 0x1401
#define GL_SHORT 0x1402
#define GL_UNSIGNED_SHORT 0x1403
#define GL_INT 0x1404
#define GL_UNSIGNED_INT 0x1405
#define GL_FLOAT 0x1406
#define GL_CLEAR 0x1500
#define GL_AND 0x1501
#define GL_AND_REVERSE 0x1502
#define GL_COPY 0x1503
#define GL_AND_INVERTED 0x1504
#define GL_NOOP 0x1505
#define GL_XOR 0x1506
#define GL_OR 0x1507
#define GL_NOR 0x1508
#define GL_EQUIV 0x1509
#define GL_INVERT 0x150A
#define GL_OR_REVERSE 0x150B
#define GL_COPY_INVERTED 0x150C
#define GL_OR_INVERTED 0x150D
#define GL_NAND 0x150E
#define GL_SET 0x150F
#define GL_TEXTURE 0x1702
#define GL_COLOR 0x1800
#define GL_DEPTH 0x1801
#define GL_STENCIL 0x1802
#define GL_STENCIL_INDEX 0x1901
#define GL_DEPTH_COMPONENT 0x1902
#define GL_RED 0x1903
#define GL_GREEN 0x1904
#define GL_BLUE 0x1905
#define GL_ALPHA 0x1906
#define GL_RGB 0x1907
#define GL_RGBA 0x1908
#define GL_POINT 0x1B00
#define GL_LINE 0x1B01
#define GL_FILL 0x1B02
#define GL_KEEP 0x1E00
#define GL_REPLACE 0x1E01
#define GL_INCR 0x1E02
#define GL_DECR 0x1E03
#define GL_VENDOR 0x1F00
#define GL_RENDERER 0x1F01
#define GL_VERSION 0x1F02
#define GL_EXTENSIONS 0x1F03
#define GL_NEAREST 0x2600
#define GL_LINEAR 0x2601
#define GL_NEAREST_MIPMAP_NEAREST 0x2700
#define GL_LINEAR_MIPMAP_NEAREST 0x2701
#define GL_NEAREST_MIPMAP_LINEAR 0x2702
#define GL_LINEAR_MIPMAP_LINEAR 0x2703
#define GL_TEXTURE_MAG_FILTER 0x2800
#define GL_TEXTURE_MIN_FILTER 0x2801
#define GL_TEXTURE_WRAP_S 0x2802
#define GL_TEXTURE_WRAP_T 0x2803
#define GL_REPEAT 0x2901
#define GL_COLOR_LOGIC_OP 0x0BF2
#define GL_POLYGON_OFFSET_UNITS 0x2A00
#define GL_POLYGON_OFFSET_POINT 0x2A01
#define GL_POLYGON_OFFSET_LINE 0x2A02
#define GL_POLYGON_OFFSET_FILL 0x8037
#define GL_POLYGON_OFFSET_FACTOR 0x8038
#define GL_TEXTURE_BINDING_1D 0x8068
#define GL_TEXTURE_BINDING_2D 0x8069
#define GL_TEXTURE_INTERNAL_FORMAT 0x1003
#define GL_TEXTURE_RED_SIZE 0x805C
#define GL_TEXTURE_GREEN_SIZE 0x805D
#define GL_TEXTURE_BLUE_SIZE 0x805E
#define GL_TEXTURE_ALPHA_SIZE 0x805F
#define GL_DOUBLE 0x140A
#define GL_PROXY_TEXTURE_1D 0x8063
#define GL_PROXY_TEXTURE_2D 0x8064
#define GL_R3_G3_B2 0x2A10
#define GL_RGB4 0x804F
#define GL_RGB5 0x8050
#define GL_RGB8 0x8051
#define GL_RGB10 0x8052
#define GL_RGB12 0x8053
#define GL_RGB16 0x8054
#define GL_RGBA2 0x8055
#define GL_RGBA4 0x8056
#define GL_RGB5_A1 0x8057
#define GL_RGBA8 0x8058
#define GL_RGB10_A2 0x8059
#define GL_RGBA12 0x805A
#define GL_RGBA16 0x805B
#define GL_UNSIGNED_BYTE_3_3_2 0x8032
#define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
#define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
#define GL_UNSIGNED_INT_8_8_8_8 0x8035
#define GL_UNSIGNED_INT_10_10_10_2 0x8036
#define GL_TEXTURE_BINDING_3D 0x806A
#define GL_PACK_SKIP_IMAGES 0x806B
#define GL_PACK_IMAGE_HEIGHT 0x806C
#define GL_UNPACK_SKIP_IMAGES 0x806D
#define GL_UNPACK_IMAGE_HEIGHT 0x806E
#define GL_TEXTURE_3D 0x806F
#define GL_PROXY_TEXTURE_3D 0x8070
#define GL_TEXTURE_DEPTH 0x8071
#define GL_TEXTURE_WRAP_R 0x8072
#define GL_MAX_3D_TEXTURE_SIZE 0x8073
#define GL_UNSIGNED_BYTE_2_3_3_REV 0x8362
#define GL_UNSIGNED_SHORT_5_6_5 0x8363
#define GL_UNSIGNED_SHORT_5_6_5_REV 0x8364
#define GL_UNSIGNED_SHORT_4_4_4_4_REV 0x8365
#define GL_UNSIGNED_SHORT_1_5_5_5_REV 0x8366
#define GL_UNSIGNED_INT_8_8_8_8_REV 0x8367
#define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368
#define GL_BGR 0x80E0
#define GL_BGRA 0x80E1
#define GL_MAX_ELEMENTS_VERTICES 0x80E8
#define GL_MAX_ELEMENTS_INDICES 0x80E9
#define GL_CLAMP_TO_EDGE 0x812F
#define GL_TEXTURE_MIN_LOD 0x813A
#define GL_TEXTURE_MAX_LOD 0x813B
#define GL_TEXTURE_BASE_LEVEL 0x813C
#define GL_TEXTURE_MAX_LEVEL 0x813D
#define GL_SMOOTH_POINT_SIZE_RANGE 0x0B12
#define GL_SMOOTH_POINT_SIZE_GRANULARITY 0x0B13
#define GL_SMOOTH_LINE_WIDTH_RANGE 0x0B22
#define GL_SMOOTH_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_ALIASED_LINE_WIDTH_RANGE 0x846E
#define GL_TEXTURE0 0x84C0
#define GL_TEXTURE1 0x84C1
#define GL_TEXTURE2 0x84C2
#define GL_TEXTURE3 0x84C3
#define GL_TEXTURE4 0x84C4
#define GL_TEXTURE5 0x84C5
#define GL_TEXTURE6 0x84C6
#define GL_TEXTURE7 0x84C7
#define GL_TEXTURE8 0x84C8
#define GL_TEXTURE9 0x84C9
#define GL_TEXTURE10 0x84CA
#define GL_TEXTURE11 0x84CB
#define GL_TEXTURE12 0x84CC
#define GL_TEXTURE13 0x84CD
#define GL_TEXTURE14 0x84CE
#define GL_TEXTURE15 0x84CF
#define GL_TEXTURE16 0x84D0
#define GL_TEXTURE17 0x84D1
#define GL_TEXTURE18 0x84D2
#define GL_TEXTURE19 0x84D3
#define GL_TEXTURE20 0x84D4
#define GL_TEXTURE21 0x84D5
#define GL_TEXTURE22 0x84D6
#define GL_TEXTURE23 0x84D7
#define GL_TEXTURE24 0x84D8
#define GL_TEXTURE25 0x84D9
#define GL_TEXTURE26 0x84DA
#define GL_TEXTURE27 0x84DB
#define GL_TEXTURE28 0x84DC
#define GL_TEXTURE29 0x84DD
#define GL_TEXTURE30 0x84DE
#define GL_TEXTURE31 0x84DF
#define GL_ACTIVE_TEXTURE 0x84E0
#define GL_MULTISAMPLE 0x809D
#define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
#define GL_SAMPLE_ALPHA_TO_ONE 0x809F
#define GL_SAMPLE_COVERAGE 0x80A0
#define GL_SAMPLE_BUFFERS 0x80A8
#define GL_SAMPLES 0x80A9
#define GL_SAMPLE_COVERAGE_VALUE 0x80AA
#define GL_SAMPLE_COVERAGE_INVERT 0x80AB
#define GL_TEXTURE_CUBE_MAP 0x8513
#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A
#define GL_PROXY_TEXTURE_CUBE_MAP 0x851B
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C
#define GL_COMPRESSED_RGB 0x84ED
#define GL_COMPRESSED_RGBA 0x84EE
#define GL_TEXTURE_COMPRESSION_HINT 0x84EF
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0x86A0
#define GL_TEXTURE_COMPRESSED 0x86A1
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
#define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
#define GL_CLAMP_TO_BORDER 0x812D
#define GL_BLEND_DST_RGB 0x80C8
#define GL_BLEND_SRC_RGB 0x80C9
#define GL_BLEND_DST_ALPHA 0x80CA
#define GL_BLEND_SRC_ALPHA 0x80CB
#define GL_POINT_FADE_THRESHOLD_SIZE 0x8128
#define GL_DEPTH_COMPONENT16 0x81A5
#define GL_DEPTH_COMPONENT24 0x81A6
#define GL_DEPTH_COMPONENT32 0x81A7
#define GL_MIRRORED_REPEAT 0x8370
#define GL_MAX_TEXTURE_LOD_BIAS 0x84FD
#define GL_TEXTURE_LOD_BIAS 0x8501
#define GL_INCR_WRAP 0x8507
#define GL_DECR_WRAP 0x8508
#define GL_TEXTURE_DEPTH_SIZE 0x884A
#define GL_TEXTURE_COMPARE_MODE 0x884C
#define GL_TEXTURE_COMPARE_FUNC 0x884D
#define GL_BLEND_COLOR 0x8005
#define GL_BLEND_EQUATION 0x8009
#define GL_CONSTANT_COLOR 0x8001
#define GL_ONE_MINUS_CONSTANT_COLOR 0x8002
#define GL_CONSTANT_ALPHA 0x8003
#define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004
#define GL_FUNC_ADD 0x8006
#define GL_FUNC_REVERSE_SUBTRACT 0x800B
#define GL_FUNC_SUBTRACT 0x800A
#define GL_MIN 0x8007
#define GL_MAX 0x8008
#define GL_BUFFER_SIZE 0x8764
#define GL_BUFFER_USAGE 0x8765
#define GL_QUERY_COUNTER_BITS 0x8864
#define GL_CURRENT_QUERY 0x8865
#define GL_QUERY_RESULT 0x8866
#define GL_QUERY_RESULT_AVAILABLE 0x8867
#define GL_ARRAY_BUFFER 0x8892
#define GL_ELEMENT_ARRAY_BUFFER 0x8893
#define GL_ARRAY_BUFFER_BINDING 0x8894
#define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
#define GL_READ_ONLY 0x88B8
#define GL_WRITE_ONLY 0x88B9
#define GL_READ_WRITE 0x88BA
#define GL_BUFFER_ACCESS 0x88BB
#define GL_BUFFER_MAPPED 0x88BC
#define GL_BUFFER_MAP_POINTER 0x88BD
#define GL_STREAM_DRAW 0x88E0
#define GL_STREAM_READ 0x88E1
#define GL_STREAM_COPY 0x88E2
#define GL_STATIC_DRAW 0x88E4
#define GL_STATIC_READ 0x88E5
#define GL_STATIC_COPY 0x88E6
#define GL_DYNAMIC_DRAW 0x88E8
#define GL_DYNAMIC_READ 0x88E9
#define GL_DYNAMIC_COPY 0x88EA
#define GL_SAMPLES_PASSED 0x8914
#define GL_SRC1_ALPHA 0x8589
#define GL_BLEND_EQUATION_RGB 0x8009
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0x8622
#define GL_VERTEX_ATTRIB_ARRAY_SIZE 0x8623
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0x8624
#define GL_VERTEX_ATTRIB_ARRAY_TYPE 0x8625
#define GL_CURRENT_VERTEX_ATTRIB 0x8626
#define GL_VERTEX_PROGRAM_POINT_SIZE 0x8642
#define GL_VERTEX_ATTRIB_ARRAY_POINTER 0x8645
#define GL_STENCIL_BACK_FUNC 0x8800
#define GL_STENCIL_BACK_FAIL 0x8801
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0x8802
#define GL_STENCIL_BACK_PASS_DEPTH_PASS 0x8803
#define GL_MAX_DRAW_BUFFERS 0x8824
#define GL_DRAW_BUFFER0 0x8825
#define GL_DRAW_BUFFER1 0x8826
#define GL_DRAW_BUFFER2 0x8827
#define GL_DRAW_BUFFER3 0x8828
#define GL_DRAW_BUFFER4 0x8829
#define GL_DRAW_BUFFER5 0x882A
#define GL_DRAW_BUFFER6 0x882B
#define GL_DRAW_BUFFER7 0x882C
#define GL_DRAW_BUFFER8 0x882D
#define GL_DRAW_BUFFER9 0x882E
#define GL_DRAW_BUFFER10 0x882F
#define GL_DRAW_BUFFER11 0x8830
#define GL_DRAW_BUFFER12 0x8831
#define GL_DRAW_BUFFER13 0x8832
#define GL_DRAW_BUFFER14 0x8833
#define GL_DRAW_BUFFER15 0x8834
#define GL_BLEND_EQUATION_ALPHA 0x883D
#define GL_MAX_VERTEX_ATTRIBS 0x8869
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
#define GL_MAX_TEXTURE_IMAGE_UNITS 0x8872
#define GL_FRAGMENT_SHADER 0x8B30
#define GL_VERTEX_SHADER 0x8B31
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS 0x8B4A
#define GL_MAX_VARYING_FLOATS 0x8B4B
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
#define GL_SHADER_TYPE 0x8B4F
#define GL_FLOAT_VEC2 0x8B50
#define GL_FLOAT_VEC3 0x8B51
#define GL_FLOAT_VEC4 0x8B52
#define GL_INT_VEC2 0x8B53
#define GL_INT_VEC3 0x8B54
#define GL_INT_VEC4 0x8B55
#define GL_BOOL 0x8B56
#define GL_BOOL_VEC2 0x8B57
#define GL_BOOL_VEC3 0x8B58
#define GL_BOOL_VEC4 0x8B59
#define GL_FLOAT_MAT2 0x8B5A
#define GL_FLOAT_MAT3 0x8B5B
#define GL_FLOAT_MAT4 0x8B5C
#define GL_SAMPLER_1D 0x8B5D
#define GL_SAMPLER_2D 0x8B5E
#define GL_SAMPLER_3D 0x8B5F
#define GL_SAMPLER_CUBE 0x8B60
#define GL_SAMPLER_1D_SHADOW 0x8B61
#define GL_SAMPLER_2D_SHADOW 0x8B62
#define GL_DELETE_STATUS 0x8B80
#define GL_COMPILE_STATUS 0x8B81
#define GL_LINK_STATUS 0x8B82
#define GL_VALIDATE_STATUS 0x8B83
#define GL_INFO_LOG_LENGTH 0x8B84
#define GL_ATTACHED_SHADERS 0x8B85
#define GL_ACTIVE_UNIFORMS 0x8B86
#define GL_ACTIVE_UNIFORM_MAX_LENGTH 0x8B87
#define GL_SHADER_SOURCE_LENGTH 0x8B88
#define GL_ACTIVE_ATTRIBUTES 0x8B89
#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0x8B8A
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
#define GL_SHADING_LANGUAGE_VERSION 0x8B8C
#define GL_CURRENT_PROGRAM 0x8B8D
#define GL_POINT_SPRITE_COORD_ORIGIN 0x8CA0
#define GL_LOWER_LEFT 0x8CA1
#define GL_UPPER_LEFT 0x8CA2
#define GL_STENCIL_BACK_REF 0x8CA3
#define GL_STENCIL_BACK_VALUE_MASK 0x8CA4
#define GL_STENCIL_BACK_WRITEMASK 0x8CA5
#define GL_PIXEL_PACK_BUFFER 0x88EB
#define GL_PIXEL_UNPACK_BUFFER 0x88EC
#define GL_PIXEL_PACK_BUFFER_BINDING 0x88ED
#define GL_PIXEL_UNPACK_BUFFER_BINDING 0x88EF
#define GL_FLOAT_MAT2x3 0x8B65
#define GL_FLOAT_MAT2x4 0x8B66
#define GL_FLOAT_MAT3x2 0x8B67
#define GL_FLOAT_MAT3x4 0x8B68
#define GL_FLOAT_MAT4x2 0x8B69
#define GL_FLOAT_MAT4x3 0x8B6A
#define GL_SRGB 0x8C40
#define GL_SRGB8 0x8C41
#define GL_SRGB_ALPHA 0x8C42
#define GL_SRGB8_ALPHA8 0x8C43
#define GL_COMPRESSED_SRGB 0x8C48
#define GL_COMPRESSED_SRGB_ALPHA 0x8C49
#define GL_COMPARE_REF_TO_TEXTURE 0x884E
#define GL_CLIP_DISTANCE0 0x3000
#define GL_CLIP_DISTANCE1 0x3001
#define GL_CLIP_DISTANCE2 0x3002
#define GL_CLIP_DISTANCE3 0x3003
#define GL_CLIP_DISTANCE4 0x3004
#define GL_CLIP_DISTANCE5 0x3005
#define GL_CLIP_DISTANCE6 0x3006
#define GL_CLIP_DISTANCE7 0x3007
#define GL_MAX_CLIP_DISTANCES 0x0D32
#define GL_MAJOR_VERSION 0x821B
#define GL_MINOR_VERSION 0x821C
#define GL_NUM_EXTENSIONS 0x821D
#define GL_CONTEXT_FLAGS 0x821E
#define GL_COMPRESSED_RED 0x8225
#define GL_COMPRESSED_RG 0x8226
#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x00000001
#define GL_RGBA32F 0x8814
#define GL_RGB32F 0x8815
#define GL_RGBA16F 0x881A
#define GL_RGB16F 0x881B
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER 0x88FD
#define GL_MAX_ARRAY_TEXTURE_LAYERS 0x88FF
#define GL_MIN_PROGRAM_TEXEL_OFFSET 0x8904
#define GL_MAX_PROGRAM_TEXEL_OFFSET 0x8905
#define GL_CLAMP_READ_COLOR 0x891C
#define GL_FIXED_ONLY 0x891D
#define GL_MAX_VARYING_COMPONENTS 0x8B4B
#define GL_TEXTURE_1D_ARRAY 0x8C18
#define GL_PROXY_TEXTURE_1D_ARRAY 0x8C19
#define GL_TEXTURE_2D_ARRAY 0x8C1A
#define GL_PROXY_TEXTURE_2D_ARRAY 0x8C1B
#define GL_TEXTURE_BINDING_1D_ARRAY 0x8C1C
#define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D
#define GL_R11F_G11F_B10F 0x8C3A
#define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B
#define GL_RGB9_E5 0x8C3D
#define GL_UNSIGNED_INT_5_9_9_9_REV 0x8C3E
#define GL_TEXTURE_SHARED_SIZE 0x8C3F
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
#define GL_TRANSFORM_FEEDBACK_VARYINGS 0x8C83
#define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85
#define GL_PRIMITIVES_GENERATED 0x8C87
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
#define GL_RASTERIZER_DISCARD 0x8C89
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
#define GL_INTERLEAVED_ATTRIBS 0x8C8C
#define GL_SEPARATE_ATTRIBS 0x8C8D
#define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F
#define GL_RGBA32UI 0x8D70
#define GL_RGB32UI 0x8D71
#define GL_RGBA16UI 0x8D76
#define GL_RGB16UI 0x8D77
#define GL_RGBA8UI 0x8D7C
#define GL_RGB8UI 0x8D7D
#define GL_RGBA32I 0x8D82
#define GL_RGB32I 0x8D83
#define GL_RGBA16I 0x8D88
#define GL_RGB16I 0x8D89
#define GL_RGBA8I 0x8D8E
#define GL_RGB8I 0x8D8F
#define GL_RED_INTEGER 0x8D94
#define GL_GREEN_INTEGER 0x8D95
#define GL_BLUE_INTEGER 0x8D96
#define GL_RGB_INTEGER 0x8D98
#define GL_RGBA_INTEGER 0x8D99
#define GL_BGR_INTEGER 0x8D9A
#define GL_BGRA_INTEGER 0x8D9B
#define GL_SAMPLER_1D_ARRAY 0x8DC0
#define GL_SAMPLER_2D_ARRAY 0x8DC1
#define GL_SAMPLER_1D_ARRAY_SHADOW 0x8DC3
#define GL_SAMPLER_2D_ARRAY_SHADOW 0x8DC4
#define GL_SAMPLER_CUBE_SHADOW 0x8DC5
#define GL_UNSIGNED_INT_VEC2 0x8DC6
#define GL_UNSIGNED_INT_VEC3 0x8DC7
#define GL_UNSIGNED_INT_VEC4 0x8DC8
#define GL_INT_SAMPLER_1D 0x8DC9
#define GL_INT_SAMPLER_2D 0x8DCA
#define GL_INT_SAMPLER_3D 0x8DCB
#define GL_INT_SAMPLER_CUBE 0x8DCC
#define GL_INT_SAMPLER_1D_ARRAY 0x8DCE
#define GL_INT_SAMPLER_2D_ARRAY 0x8DCF
#define GL_UNSIGNED_INT_SAMPLER_1D 0x8DD1
#define GL_UNSIGNED_INT_SAMPLER_2D 0x8DD2
#define GL_UNSIGNED_INT_SAMPLER_3D 0x8DD3
#define GL_UNSIGNED_INT_SAMPLER_CUBE 0x8DD4
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY 0x8DD6
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY 0x8DD7
#define GL_QUERY_WAIT 0x8E13
#define GL_QUERY_NO_WAIT 0x8E14
#define GL_QUERY_BY_REGION_WAIT 0x8E15
#define GL_QUERY_BY_REGION_NO_WAIT 0x8E16
#define GL_BUFFER_ACCESS_FLAGS 0x911F
#define GL_BUFFER_MAP_LENGTH 0x9120
#define GL_BUFFER_MAP_OFFSET 0x9121
#define GL_DEPTH_COMPONENT32F 0x8CAC
#define GL_DEPTH32F_STENCIL8 0x8CAD
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
#define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
#define GL_FRAMEBUFFER_DEFAULT 0x8218
#define GL_FRAMEBUFFER_UNDEFINED 0x8219
#define GL_DEPTH_STENCIL_ATTACHMENT 0x821A
#define GL_MAX_RENDERBUFFER_SIZE 0x84E8
#define GL_DEPTH_STENCIL 0x84F9
#define GL_UNSIGNED_INT_24_8 0x84FA
#define GL_DEPTH24_STENCIL8 0x88F0
#define GL_TEXTURE_STENCIL_SIZE 0x88F1
#define GL_TEXTURE_RED_TYPE 0x8C10
#define GL_TEXTURE_GREEN_TYPE 0x8C11
#define GL_TEXTURE_BLUE_TYPE 0x8C12
#define GL_TEXTURE_ALPHA_TYPE 0x8C13
#define GL_TEXTURE_DEPTH_TYPE 0x8C16
#define GL_UNSIGNED_NORMALIZED 0x8C17
#define GL_FRAMEBUFFER_BINDING 0x8CA6
#define GL_DRAW_FRAMEBUFFER_BINDING 0x8CA6
#define GL_RENDERBUFFER_BINDING 0x8CA7
#define GL_READ_FRAMEBUFFER 0x8CA8
#define GL_DRAW_FRAMEBUFFER 0x8CA9
#define GL_READ_FRAMEBUFFER_BINDING 0x8CAA
#define GL_RENDERBUFFER_SAMPLES 0x8CAB
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
#define GL_FRAMEBUFFER_COMPLETE 0x8CD5
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
#define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD
#define GL_MAX_COLOR_ATTACHMENTS 0x8CDF
#define GL_COLOR_ATTACHMENT0 0x8CE0
#define GL_COLOR_ATTACHMENT1 0x8CE1
#define GL_COLOR_ATTACHMENT2 0x8CE2
#define GL_COLOR_ATTACHMENT3 0x8CE3
#define GL_COLOR_ATTACHMENT4 0x8CE4
#define GL_COLOR_ATTACHMENT5 0x8CE5
#define GL_COLOR_ATTACHMENT6 0x8CE6
#define GL_COLOR_ATTACHMENT7 0x8CE7
#define GL_COLOR_ATTACHMENT8 0x8CE8
#define GL_COLOR_ATTACHMENT9 0x8CE9
#define GL_COLOR_ATTACHMENT10 0x8CEA
#define GL_COLOR_ATTACHMENT11 0x8CEB
#define GL_COLOR_ATTACHMENT12 0x8CEC
#define GL_COLOR_ATTACHMENT13 0x8CED
#define GL_COLOR_ATTACHMENT14 0x8CEE
#define GL_COLOR_ATTACHMENT15 0x8CEF
#define GL_COLOR_ATTACHMENT16 0x8CF0
#define GL_COLOR_ATTACHMENT17 0x8CF1
#define GL_COLOR_ATTACHMENT18 0x8CF2
#define GL_COLOR_ATTACHMENT19 0x8CF3
#define GL_COLOR_ATTACHMENT20 0x8CF4
#define GL_COLOR_ATTACHMENT21 0x8CF5
#define GL_COLOR_ATTACHMENT22 0x8CF6
#define GL_COLOR_ATTACHMENT23 0x8CF7
#define GL_COLOR_ATTACHMENT24 0x8CF8
#define GL_COLOR_ATTACHMENT25 0x8CF9
#define GL_COLOR_ATTACHMENT26 0x8CFA
#define GL_COLOR_ATTACHMENT27 0x8CFB
#define GL_COLOR_ATTACHMENT28 0x8CFC
#define GL_COLOR_ATTACHMENT29 0x8CFD
#define GL_COLOR_ATTACHMENT30 0x8CFE
#define GL_COLOR_ATTACHMENT31 0x8CFF
#define GL_DEPTH_ATTACHMENT 0x8D00
#define GL_STENCIL_ATTACHMENT 0x8D20
#define GL_FRAMEBUFFER 0x8D40
#define GL_RENDERBUFFER 0x8D41
#define GL_RENDERBUFFER_WIDTH 0x8D42
#define GL_RENDERBUFFER_HEIGHT 0x8D43
#define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44
#define GL_STENCIL_INDEX1 0x8D46
#define GL_STENCIL_INDEX4 0x8D47
#define GL_STENCIL_INDEX8 0x8D48
#define GL_STENCIL_INDEX16 0x8D49
#define GL_RENDERBUFFER_RED_SIZE 0x8D50
#define GL_RENDERBUFFER_GREEN_SIZE 0x8D51
#define GL_RENDERBUFFER_BLUE_SIZE 0x8D52
#define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53
#define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54
#define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
#define GL_MAX_SAMPLES 0x8D57
#define GL_FRAMEBUFFER_SRGB 0x8DB9
#define GL_HALF_FLOAT 0x140B
#define GL_MAP_READ_BIT 0x0001
#define GL_MAP_WRITE_BIT 0x0002
#define GL_MAP_INVALIDATE_RANGE_BIT 0x0004
#define GL_MAP_INVALIDATE_BUFFER_BIT 0x0008
#define GL_MAP_FLUSH_EXPLICIT_BIT 0x0010
#define GL_MAP_UNSYNCHRONIZED_BIT 0x0020
#define GL_COMPRESSED_RED_RGTC1 0x8DBB
#define GL_COMPRESSED_SIGNED_RED_RGTC1 0x8DBC
#define GL_COMPRESSED_RG_RGTC2 0x8DBD
#define GL_COMPRESSED_SIGNED_RG_RGTC2 0x8DBE
#define GL_RG 0x8227
#define GL_RG_INTEGER 0x8228
#define GL_R8 0x8229
#define GL_R16 0x822A
#define GL_RG8 0x822B
#define GL_RG16 0x822C
#define GL_R16F 0x822D
#define GL_R32F 0x822E
#define GL_RG16F 0x822F
#define GL_RG32F 0x8230
#define GL_R8I 0x8231
#define GL_R8UI 0x8232
#define GL_R16I 0x8233
#define GL_R16UI 0x8234
#define GL_R32I 0x8235
#define GL_R32UI 0x8236
#define GL_RG8I 0x8237
#define GL_RG8UI 0x8238
#define GL_RG16I 0x8239
#define GL_RG16UI 0x823A
#define GL_RG32I 0x823B
#define GL_RG32UI 0x823C
#define GL_VERTEX_ARRAY_BINDING 0x85B5
#define GL_SAMPLER_2D_RECT 0x8B63
#define GL_SAMPLER_2D_RECT_SHADOW 0x8B64
#define GL_SAMPLER_BUFFER 0x8DC2
#define GL_INT_SAMPLER_2D_RECT 0x8DCD
#define GL_INT_SAMPLER_BUFFER 0x8DD0
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT 0x8DD5
#define GL_UNSIGNED_INT_SAMPLER_BUFFER 0x8DD8
#define GL_TEXTURE_BUFFER 0x8C2A
#define GL_MAX_TEXTURE_BUFFER_SIZE 0x8C2B
#define GL_TEXTURE_BINDING_BUFFER 0x8C2C
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING 0x8C2D
#define GL_TEXTURE_RECTANGLE 0x84F5
#define GL_TEXTURE_BINDING_RECTANGLE 0x84F6
#define GL_PROXY_TEXTURE_RECTANGLE 0x84F7
#define GL_MAX_RECTANGLE_TEXTURE_SIZE 0x84F8
#define GL_R8_SNORM 0x8F94
#define GL_RG8_SNORM 0x8F95
#define GL_RGB8_SNORM 0x8F96
#define GL_RGBA8_SNORM 0x8F97
#define GL_R16_SNORM 0x8F98
#define GL_RG16_SNORM 0x8F99
#define GL_RGB16_SNORM 0x8F9A
#define GL_RGBA16_SNORM 0x8F9B
#define GL_SIGNED_NORMALIZED 0x8F9C
#define GL_PRIMITIVE_RESTART 0x8F9D
#define GL_PRIMITIVE_RESTART_INDEX 0x8F9E
#define GL_COPY_READ_BUFFER 0x8F36
#define GL_COPY_WRITE_BUFFER 0x8F37
#define GL_UNIFORM_BUFFER 0x8A11
#define GL_UNIFORM_BUFFER_BINDING 0x8A28
#define GL_UNIFORM_BUFFER_START 0x8A29
#define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#define GL_UNIFORM_TYPE 0x8A37
#define GL_UNIFORM_SIZE 0x8A38
#define GL_UNIFORM_NAME_LENGTH 0x8A39
#define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#define GL_UNIFORM_OFFSET 0x8A3B
#define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#define GL_INVALID_INDEX 0xFFFFFFFF
#define GL_CONTEXT_CORE_PROFILE_BIT 0x00000001
#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT 0x00000002
#define GL_LINES_ADJACENCY 0x000A
#define GL_LINE_STRIP_ADJACENCY 0x000B
#define GL_TRIANGLES_ADJACENCY 0x000C
#define GL_TRIANGLE_STRIP_ADJACENCY 0x000D
#define GL_PROGRAM_POINT_SIZE 0x8642
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS 0x8C29
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED 0x8DA7
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS 0x8DA8
#define GL_GEOMETRY_SHADER 0x8DD9
#define GL_GEOMETRY_VERTICES_OUT 0x8916
#define GL_GEOMETRY_INPUT_TYPE 0x8917
#define GL_GEOMETRY_OUTPUT_TYPE 0x8918
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS 0x8DDF
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES 0x8DE0
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS 0x8DE1
#define GL_MAX_VERTEX_OUTPUT_COMPONENTS 0x9122
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS 0x9123
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS 0x9124
#define GL_MAX_FRAGMENT_INPUT_COMPONENTS 0x9125
#define GL_CONTEXT_PROFILE_MASK 0x9126
#define GL_DEPTH_CLAMP 0x864F
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0x8E4C
#define GL_FIRST_VERTEX_CONVENTION 0x8E4D
#define GL_LAST_VERTEX_CONVENTION 0x8E4E
#define GL_PROVOKING_VERTEX 0x8E4F
#define GL_TEXTURE_CUBE_MAP_SEAMLESS 0x884F
#define GL_MAX_SERVER_WAIT_TIMEOUT 0x9111
#define GL_OBJECT_TYPE 0x9112
#define GL_SYNC_CONDITION 0x9113
#define GL_SYNC_STATUS 0x9114
#define GL_SYNC_FLAGS 0x9115
#define GL_SYNC_FENCE 0x9116
#define GL_SYNC_GPU_COMMANDS_COMPLETE 0x9117
#define GL_UNSIGNALED 0x9118
#define GL_SIGNALED 0x9119
#define GL_ALREADY_SIGNALED 0x911A
#define GL_TIMEOUT_EXPIRED 0x911B
#define GL_CONDITION_SATISFIED 0x911C
#define GL_WAIT_FAILED 0x911D
#define GL_TIMEOUT_IGNORED 0xFFFFFFFFFFFFFFFF
#define GL_SYNC_FLUSH_COMMANDS_BIT 0x00000001
#define GL_SAMPLE_POSITION 0x8E50
#define GL_SAMPLE_MASK 0x8E51
#define GL_SAMPLE_MASK_VALUE 0x8E52
#define GL_MAX_SAMPLE_MASK_WORDS 0x8E59
#define GL_TEXTURE_2D_MULTISAMPLE 0x9100
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE 0x9101
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9102
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9103
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
#define GL_TEXTURE_SAMPLES 0x9106
#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0x9107
#define GL_SAMPLER_2D_MULTISAMPLE 0x9108
#define GL_INT_SAMPLER_2D_MULTISAMPLE 0x9109
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910B
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D
#define GL_MAX_COLOR_TEXTURE_SAMPLES 0x910E
#define GL_MAX_DEPTH_TEXTURE_SAMPLES 0x910F
#define GL_MAX_INTEGER_SAMPLES 0x9110
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR 0x88FE
#define GL_SRC1_COLOR 0x88F9
#define GL_ONE_MINUS_SRC1_COLOR 0x88FA
#define GL_ONE_MINUS_SRC1_ALPHA 0x88FB
#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS 0x88FC
#define GL_ANY_SAMPLES_PASSED 0x8C2F
#define GL_SAMPLER_BINDING 0x8919
#define GL_RGB10_A2UI 0x906F
#define GL_TEXTURE_SWIZZLE_R 0x8E42
#define GL_TEXTURE_SWIZZLE_G 0x8E43
#define GL_TEXTURE_SWIZZLE_B 0x8E44
#define GL_TEXTURE_SWIZZLE_A 0x8E45
#define GL_TEXTURE_SWIZZLE_RGBA 0x8E46
#define GL_TIME_ELAPSED 0x88BF
#define GL_TIMESTAMP 0x8E28
#define GL_INT_2_10_10_10_REV 0x8D9F
#pragma endregion

#pragma region OpenGL extensions defines
#define WGL_DRAW_TO_WINDOW_ARB                    0x2001
#define WGL_ACCELERATION_ARB                      0x2003
#define WGL_SUPPORT_OPENGL_ARB                    0x2010
#define WGL_DOUBLE_BUFFER_ARB                     0x2011
#define WGL_PIXEL_TYPE_ARB                        0x2013
#define WGL_COLOR_BITS_ARB                        0x2014
#define WGL_DEPTH_BITS_ARB                        0x2022
#define WGL_STENCIL_BITS_ARB                      0x2023
#define WGL_FULL_ACCELERATION_ARB                 0x2027
#define WGL_TYPE_RGBA_ARB                         0x202B
#define WGL_CONTEXT_MAJOR_VERSION_ARB             0x2091
#define WGL_CONTEXT_MINOR_VERSION_ARB             0x2092
#define WGL_CONTEXT_PROFILE_MASK_ARB              0x9126
#define WGL_CONTEXT_CORE_PROFILE_BIT_ARB          0x00000001
#pragma endregion

#pragma region OpenGL 1.0 functions
typedef void(__stdcall* PFNGLCULLFACEPROC)(GLenum mode);
extern PFNGLCULLFACEPROC _glCullFace;
#define glCullFace _glCullFace
typedef void(__stdcall* PFNGLFRONTFACEPROC)(GLenum mode);
extern PFNGLFRONTFACEPROC _glFrontFace;
#define glFrontFace _glFrontFace
typedef void(__stdcall* PFNGLHINTPROC)(GLenum target, GLenum mode);
extern PFNGLHINTPROC _glHint;
#define glHint _glHint
typedef void(__stdcall* PFNGLLINEWIDTHPROC)(GLfloat width);
extern PFNGLLINEWIDTHPROC _glLineWidth;
#define glLineWidth _glLineWidth
typedef void(__stdcall* PFNGLPOINTSIZEPROC)(GLfloat size);
extern PFNGLPOINTSIZEPROC _glPointSize;
#define glPointSize _glPointSize
typedef void(__stdcall* PFNGLPOLYGONMODEPROC)(GLenum face, GLenum mode);
extern PFNGLPOLYGONMODEPROC _glPolygonMode;
#define glPolygonMode _glPolygonMode
typedef void(__stdcall* PFNGLSCISSORPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
extern PFNGLSCISSORPROC _glScissor;
#define glScissor _glScissor
typedef void(__stdcall* PFNGLTEXPARAMETERFPROC)(GLenum target, GLenum pname, GLfloat param);
extern PFNGLTEXPARAMETERFPROC _glTexParameterf;
#define glTexParameterf _glTexParameterf
typedef void(__stdcall* PFNGLTEXPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat* params);
extern PFNGLTEXPARAMETERFVPROC _glTexParameterfv;
#define glTexParameterfv _glTexParameterfv
typedef void(__stdcall* PFNGLTEXPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);
extern PFNGLTEXPARAMETERIPROC _glTexParameteri;
#define glTexParameteri _glTexParameteri
typedef void(__stdcall* PFNGLTEXPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint* params);
extern PFNGLTEXPARAMETERIVPROC _glTexParameteriv;
#define glTexParameteriv _glTexParameteriv
typedef void(__stdcall* PFNGLTEXIMAGE1DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void* pixels);
extern PFNGLTEXIMAGE1DPROC _glTexImage1D;
#define glTexImage1D _glTexImage1D
typedef void(__stdcall* PFNGLTEXIMAGE2DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void* pixels);
extern PFNGLTEXIMAGE2DPROC _glTexImage2D;
#define glTexImage2D _glTexImage2D
typedef void(__stdcall* PFNGLDRAWBUFFERPROC)(GLenum buf);
extern PFNGLDRAWBUFFERPROC _glDrawBuffer;
#define glDrawBuffer _glDrawBuffer
typedef void(__stdcall* PFNGLCLEARPROC)(GLbitfield mask);
extern PFNGLCLEARPROC _glClear;
#define glClear _glClear
typedef void(__stdcall* PFNGLCLEARCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
extern PFNGLCLEARCOLORPROC _glClearColor;
#define glClearColor _glClearColor
typedef void(__stdcall* PFNGLCLEARSTENCILPROC)(GLint s);
extern PFNGLCLEARSTENCILPROC _glClearStencil;
#define glClearStencil _glClearStencil
typedef void(__stdcall* PFNGLCLEARDEPTHPROC)(GLdouble depth);
extern PFNGLCLEARDEPTHPROC _glClearDepth;
#define glClearDepth _glClearDepth
typedef void(__stdcall* PFNGLSTENCILMASKPROC)(GLuint mask);
extern PFNGLSTENCILMASKPROC _glStencilMask;
#define glStencilMask _glStencilMask
typedef void(__stdcall* PFNGLCOLORMASKPROC)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
extern PFNGLCOLORMASKPROC _glColorMask;
#define glColorMask _glColorMask
typedef void(__stdcall* PFNGLDEPTHMASKPROC)(GLboolean flag);
extern PFNGLDEPTHMASKPROC _glDepthMask;
#define glDepthMask _glDepthMask
typedef void(__stdcall* PFNGLDISABLEPROC)(GLenum cap);
extern PFNGLDISABLEPROC _glDisable;
#define glDisable _glDisable
typedef void(__stdcall* PFNGLENABLEPROC)(GLenum cap);
extern PFNGLENABLEPROC _glEnable;
#define glEnable _glEnable
typedef void(__stdcall* PFNGLFINISHPROC)(void);
extern PFNGLFINISHPROC _glFinish;
#define glFinish _glFinish
typedef void(__stdcall* PFNGLFLUSHPROC)(void);
extern PFNGLFLUSHPROC _glFlush;
#define glFlush _glFlush
typedef void(__stdcall* PFNGLBLENDFUNCPROC)(GLenum sfactor, GLenum dfactor);
extern PFNGLBLENDFUNCPROC _glBlendFunc;
#define glBlendFunc _glBlendFunc
typedef void(__stdcall* PFNGLLOGICOPPROC)(GLenum opcode);
extern PFNGLLOGICOPPROC _glLogicOp;
#define glLogicOp _glLogicOp
typedef void(__stdcall* PFNGLSTENCILFUNCPROC)(GLenum func, GLint ref, GLuint mask);
extern PFNGLSTENCILFUNCPROC _glStencilFunc;
#define glStencilFunc _glStencilFunc
typedef void(__stdcall* PFNGLSTENCILOPPROC)(GLenum fail, GLenum zfail, GLenum zpass);
extern PFNGLSTENCILOPPROC _glStencilOp;
#define glStencilOp _glStencilOp
typedef void(__stdcall* PFNGLDEPTHFUNCPROC)(GLenum func);
extern PFNGLDEPTHFUNCPROC _glDepthFunc;
#define glDepthFunc _glDepthFunc
typedef void(__stdcall* PFNGLPIXELSTOREFPROC)(GLenum pname, GLfloat param);
extern PFNGLPIXELSTOREFPROC _glPixelStoref;
#define glPixelStoref _glPixelStoref
typedef void(__stdcall* PFNGLPIXELSTOREIPROC)(GLenum pname, GLint param);
extern PFNGLPIXELSTOREIPROC _glPixelStorei;
#define glPixelStorei _glPixelStorei
typedef void(__stdcall* PFNGLREADBUFFERPROC)(GLenum src);
extern PFNGLREADBUFFERPROC _glReadBuffer;
#define glReadBuffer _glReadBuffer
typedef void(__stdcall* PFNGLREADPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void* pixels);
extern PFNGLREADPIXELSPROC _glReadPixels;
#define glReadPixels _glReadPixels
typedef void(__stdcall* PFNGLGETBOOLEANVPROC)(GLenum pname, GLboolean* data);
extern PFNGLGETBOOLEANVPROC _glGetBooleanv;
#define glGetBooleanv _glGetBooleanv
typedef void(__stdcall* PFNGLGETDOUBLEVPROC)(GLenum pname, GLdouble* data);
extern PFNGLGETDOUBLEVPROC _glGetDoublev;
#define glGetDoublev _glGetDoublev
typedef GLenum(__stdcall* PFNGLGETERRORPROC)(void);
extern PFNGLGETERRORPROC _glGetError;
#define glGetError _glGetError
typedef void(__stdcall* PFNGLGETFLOATVPROC)(GLenum pname, GLfloat* data);
extern PFNGLGETFLOATVPROC _glGetFloatv;
#define glGetFloatv _glGetFloatv
typedef void(__stdcall* PFNGLGETINTEGERVPROC)(GLenum pname, GLint* data);
extern PFNGLGETINTEGERVPROC _glGetIntegerv;
#define glGetIntegerv _glGetIntegerv
typedef const GLubyte* (__stdcall* PFNGLGETSTRINGPROC)(GLenum name);
extern PFNGLGETSTRINGPROC _glGetString;
#define glGetString _glGetString
typedef void(__stdcall* PFNGLGETTEXIMAGEPROC)(GLenum target, GLint level, GLenum format, GLenum type, void* pixels);
extern PFNGLGETTEXIMAGEPROC _glGetTexImage;
#define glGetTexImage _glGetTexImage
typedef void(__stdcall* PFNGLGETTEXPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat* params);
extern PFNGLGETTEXPARAMETERFVPROC _glGetTexParameterfv;
#define glGetTexParameterfv _glGetTexParameterfv
typedef void(__stdcall* PFNGLGETTEXPARAMETERIVPROC)(GLenum target, GLenum pname, GLint* params);
extern PFNGLGETTEXPARAMETERIVPROC _glGetTexParameteriv;
#define glGetTexParameteriv _glGetTexParameteriv
typedef void(__stdcall* PFNGLGETTEXLEVELPARAMETERFVPROC)(GLenum target, GLint level, GLenum pname, GLfloat* params);
extern PFNGLGETTEXLEVELPARAMETERFVPROC _glGetTexLevelParameterfv;
#define glGetTexLevelParameterfv _glGetTexLevelParameterfv
typedef void(__stdcall* PFNGLGETTEXLEVELPARAMETERIVPROC)(GLenum target, GLint level, GLenum pname, GLint* params);
extern PFNGLGETTEXLEVELPARAMETERIVPROC _glGetTexLevelParameteriv;
#define glGetTexLevelParameteriv _glGetTexLevelParameteriv
typedef GLboolean(__stdcall* PFNGLISENABLEDPROC)(GLenum cap);
extern PFNGLISENABLEDPROC _glIsEnabled;
#define glIsEnabled _glIsEnabled
typedef void(__stdcall* PFNGLDEPTHRANGEPROC)(GLdouble n, GLdouble f);
extern PFNGLDEPTHRANGEPROC _glDepthRange;
#define glDepthRange _glDepthRange
typedef void(__stdcall* PFNGLVIEWPORTPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
extern PFNGLVIEWPORTPROC _glViewport;
#define glViewport _glViewport
#pragma endregion

#pragma region OpenGL 1.1 functions
typedef void(__stdcall* PFNGLDRAWARRAYSPROC)(GLenum mode, GLint first, GLsizei count);
extern PFNGLDRAWARRAYSPROC _glDrawArrays;
#define glDrawArrays _glDrawArrays
typedef void(__stdcall* PFNGLDRAWELEMENTSPROC)(GLenum mode, GLsizei count, GLenum type, const void* indices);
extern PFNGLDRAWELEMENTSPROC _glDrawElements;
#define glDrawElements _glDrawElements
typedef void(__stdcall* PFNGLPOLYGONOFFSETPROC)(GLfloat factor, GLfloat units);
extern PFNGLPOLYGONOFFSETPROC _glPolygonOffset;
#define glPolygonOffset _glPolygonOffset
typedef void(__stdcall* PFNGLCOPYTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
extern PFNGLCOPYTEXIMAGE1DPROC _glCopyTexImage1D;
#define glCopyTexImage1D _glCopyTexImage1D
typedef void(__stdcall* PFNGLCOPYTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
extern PFNGLCOPYTEXIMAGE2DPROC _glCopyTexImage2D;
#define glCopyTexImage2D _glCopyTexImage2D
typedef void(__stdcall* PFNGLCOPYTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
extern PFNGLCOPYTEXSUBIMAGE1DPROC _glCopyTexSubImage1D;
#define glCopyTexSubImage1D _glCopyTexSubImage1D
typedef void(__stdcall* PFNGLCOPYTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
extern PFNGLCOPYTEXSUBIMAGE2DPROC _glCopyTexSubImage2D;
#define glCopyTexSubImage2D _glCopyTexSubImage2D
typedef void(__stdcall* PFNGLTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels);
extern PFNGLTEXSUBIMAGE1DPROC _glTexSubImage1D;
#define glTexSubImage1D _glTexSubImage1D
typedef void(__stdcall* PFNGLTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels);
extern PFNGLTEXSUBIMAGE2DPROC _glTexSubImage2D;
#define glTexSubImage2D _glTexSubImage2D
typedef void(__stdcall* PFNGLBINDTEXTUREPROC)(GLenum target, GLuint texture);
extern PFNGLBINDTEXTUREPROC _glBindTexture;
#define glBindTexture _glBindTexture
typedef void(__stdcall* PFNGLDELETETEXTURESPROC)(GLsizei n, const GLuint* textures);
extern PFNGLDELETETEXTURESPROC _glDeleteTextures;
#define glDeleteTextures _glDeleteTextures
typedef void(__stdcall* PFNGLGENTEXTURESPROC)(GLsizei n, GLuint* textures);
extern PFNGLGENTEXTURESPROC _glGenTextures;
#define glGenTextures _glGenTextures
typedef GLboolean(__stdcall* PFNGLISTEXTUREPROC)(GLuint texture);
extern PFNGLISTEXTUREPROC _glIsTexture;
#define glIsTexture _glIsTexture
#pragma endregion

#pragma region OpenGL 1.2 functions
typedef void(__stdcall* PFNGLDRAWRANGEELEMENTSPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void* indices);
extern PFNGLDRAWRANGEELEMENTSPROC _glDrawRangeElements;
#define glDrawRangeElements _glDrawRangeElements
typedef void(__stdcall* PFNGLTEXIMAGE3DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void* pixels);
extern PFNGLTEXIMAGE3DPROC _glTexImage3D;
#define glTexImage3D _glTexImage3D
typedef void(__stdcall* PFNGLTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels);
extern PFNGLTEXSUBIMAGE3DPROC _glTexSubImage3D;
#define glTexSubImage3D _glTexSubImage3D
typedef void(__stdcall* PFNGLCOPYTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
extern PFNGLCOPYTEXSUBIMAGE3DPROC _glCopyTexSubImage3D;
#define glCopyTexSubImage3D _glCopyTexSubImage3D
#pragma endregion

#pragma region OpenGL 1.3 functions
typedef void(__stdcall* PFNGLACTIVETEXTUREPROC)(GLenum texture);
extern PFNGLACTIVETEXTUREPROC _glActiveTexture;
#define glActiveTexture _glActiveTexture
typedef void(__stdcall* PFNGLSAMPLECOVERAGEPROC)(GLfloat value, GLboolean invert);
extern PFNGLSAMPLECOVERAGEPROC _glSampleCoverage;
#define glSampleCoverage _glSampleCoverage
typedef void(__stdcall* PFNGLCOMPRESSEDTEXIMAGE3DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void* data);
extern PFNGLCOMPRESSEDTEXIMAGE3DPROC _glCompressedTexImage3D;
#define glCompressedTexImage3D _glCompressedTexImage3D
typedef void(__stdcall* PFNGLCOMPRESSEDTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* data);
extern PFNGLCOMPRESSEDTEXIMAGE2DPROC _glCompressedTexImage2D;
#define glCompressedTexImage2D _glCompressedTexImage2D
typedef void(__stdcall* PFNGLCOMPRESSEDTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void* data);
extern PFNGLCOMPRESSEDTEXIMAGE1DPROC _glCompressedTexImage1D;
#define glCompressedTexImage1D _glCompressedTexImage1D
typedef void(__stdcall* PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* data);
extern PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC _glCompressedTexSubImage3D;
#define glCompressedTexSubImage3D _glCompressedTexSubImage3D
typedef void(__stdcall* PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data);
extern PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC _glCompressedTexSubImage2D;
#define glCompressedTexSubImage2D _glCompressedTexSubImage2D
typedef void(__stdcall* PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* data);
extern PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC _glCompressedTexSubImage1D;
#define glCompressedTexSubImage1D _glCompressedTexSubImage1D
typedef void(__stdcall* PFNGLGETCOMPRESSEDTEXIMAGEPROC)(GLenum target, GLint level, void* img);
extern PFNGLGETCOMPRESSEDTEXIMAGEPROC _glGetCompressedTexImage;
#define glGetCompressedTexImage _glGetCompressedTexImage
#pragma endregion

#pragma region OpenGL 1.4 functions
typedef void(__stdcall* PFNGLBLENDFUNCSEPARATEPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
extern PFNGLBLENDFUNCSEPARATEPROC _glBlendFuncSeparate;
#define glBlendFuncSeparate _glBlendFuncSeparate
typedef void(__stdcall* PFNGLMULTIDRAWARRAYSPROC)(GLenum mode, const GLint* first, const GLsizei* count, GLsizei drawcount);
extern PFNGLMULTIDRAWARRAYSPROC _glMultiDrawArrays;
#define glMultiDrawArrays _glMultiDrawArrays
typedef void(__stdcall* PFNGLMULTIDRAWELEMENTSPROC)(GLenum mode, const GLsizei* count, GLenum type, const void* const* indices, GLsizei drawcount);
extern PFNGLMULTIDRAWELEMENTSPROC _glMultiDrawElements;
#define glMultiDrawElements _glMultiDrawElements
typedef void(__stdcall* PFNGLPOINTPARAMETERFPROC)(GLenum pname, GLfloat param);
extern PFNGLPOINTPARAMETERFPROC _glPointParameterf;
#define glPointParameterf _glPointParameterf
typedef void(__stdcall* PFNGLPOINTPARAMETERFVPROC)(GLenum pname, const GLfloat* params);
extern PFNGLPOINTPARAMETERFVPROC _glPointParameterfv;
#define glPointParameterfv _glPointParameterfv
typedef void(__stdcall* PFNGLPOINTPARAMETERIPROC)(GLenum pname, GLint param);
extern PFNGLPOINTPARAMETERIPROC _glPointParameteri;
#define glPointParameteri _glPointParameteri
typedef void(__stdcall* PFNGLPOINTPARAMETERIVPROC)(GLenum pname, const GLint* params);
extern PFNGLPOINTPARAMETERIVPROC _glPointParameteriv;
#define glPointParameteriv _glPointParameteriv
typedef void(__stdcall* PFNGLBLENDCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
extern PFNGLBLENDCOLORPROC _glBlendColor;
#define glBlendColor _glBlendColor
typedef void(__stdcall* PFNGLBLENDEQUATIONPROC)(GLenum mode);
extern PFNGLBLENDEQUATIONPROC _glBlendEquation;
#define glBlendEquation _glBlendEquation
#pragma endregion

#pragma region OpenGL 1.5 functions
typedef void(__stdcall* PFNGLGENQUERIESPROC)(GLsizei n, GLuint* ids);
extern PFNGLGENQUERIESPROC _glGenQueries;
#define glGenQueries _glGenQueries
typedef void(__stdcall* PFNGLDELETEQUERIESPROC)(GLsizei n, const GLuint* ids);
extern PFNGLDELETEQUERIESPROC _glDeleteQueries;
#define glDeleteQueries _glDeleteQueries
typedef GLboolean(__stdcall* PFNGLISQUERYPROC)(GLuint id);
extern PFNGLISQUERYPROC _glIsQuery;
#define glIsQuery _glIsQuery
typedef void(__stdcall* PFNGLBEGINQUERYPROC)(GLenum target, GLuint id);
extern PFNGLBEGINQUERYPROC _glBeginQuery;
#define glBeginQuery _glBeginQuery
typedef void(__stdcall* PFNGLENDQUERYPROC)(GLenum target);
extern PFNGLENDQUERYPROC _glEndQuery;
#define glEndQuery _glEndQuery
typedef void(__stdcall* PFNGLGETQUERYIVPROC)(GLenum target, GLenum pname, GLint* params);
extern PFNGLGETQUERYIVPROC _glGetQueryiv;
#define glGetQueryiv _glGetQueryiv
typedef void(__stdcall* PFNGLGETQUERYOBJECTIVPROC)(GLuint id, GLenum pname, GLint* params);
extern PFNGLGETQUERYOBJECTIVPROC _glGetQueryObjectiv;
#define glGetQueryObjectiv _glGetQueryObjectiv
typedef void(__stdcall* PFNGLGETQUERYOBJECTUIVPROC)(GLuint id, GLenum pname, GLuint* params);
extern PFNGLGETQUERYOBJECTUIVPROC _glGetQueryObjectuiv;
#define glGetQueryObjectuiv _glGetQueryObjectuiv
typedef void(__stdcall* PFNGLBINDBUFFERPROC)(GLenum target, GLuint buffer);
extern PFNGLBINDBUFFERPROC _glBindBuffer;
#define glBindBuffer _glBindBuffer
typedef void(__stdcall* PFNGLDELETEBUFFERSPROC)(GLsizei n, const GLuint* buffers);
extern PFNGLDELETEBUFFERSPROC _glDeleteBuffers;
#define glDeleteBuffers _glDeleteBuffers
typedef void(__stdcall* PFNGLGENBUFFERSPROC)(GLsizei n, GLuint* buffers);
extern PFNGLGENBUFFERSPROC _glGenBuffers;
#define glGenBuffers _glGenBuffers
typedef GLboolean(__stdcall* PFNGLISBUFFERPROC)(GLuint buffer);
extern PFNGLISBUFFERPROC _glIsBuffer;
#define glIsBuffer _glIsBuffer
typedef void(__stdcall* PFNGLBUFFERDATAPROC)(GLenum target, GLsizeiptr size, const void* data, GLenum usage);
extern PFNGLBUFFERDATAPROC _glBufferData;
#define glBufferData _glBufferData
typedef void(__stdcall* PFNGLBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, const void* data);
extern PFNGLBUFFERSUBDATAPROC _glBufferSubData;
#define glBufferSubData _glBufferSubData
typedef void(__stdcall* PFNGLGETBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, void* data);
extern PFNGLGETBUFFERSUBDATAPROC _glGetBufferSubData;
#define glGetBufferSubData _glGetBufferSubData
typedef void* (__stdcall* PFNGLMAPBUFFERPROC)(GLenum target, GLenum access);
extern PFNGLMAPBUFFERPROC _glMapBuffer;
#define glMapBuffer _glMapBuffer
typedef GLboolean(__stdcall* PFNGLUNMAPBUFFERPROC)(GLenum target);
extern PFNGLUNMAPBUFFERPROC _glUnmapBuffer;
#define glUnmapBuffer _glUnmapBuffer
typedef void(__stdcall* PFNGLGETBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint* params);
extern PFNGLGETBUFFERPARAMETERIVPROC _glGetBufferParameteriv;
#define glGetBufferParameteriv _glGetBufferParameteriv
typedef void(__stdcall* PFNGLGETBUFFERPOINTERVPROC)(GLenum target, GLenum pname, void** params);
extern PFNGLGETBUFFERPOINTERVPROC _glGetBufferPointerv;
#define glGetBufferPointerv _glGetBufferPointerv
#pragma endregion

#pragma region OpenGL 2.0 functions
typedef void(__stdcall* PFNGLBLENDEQUATIONSEPARATEPROC)(GLenum modeRGB, GLenum modeAlpha);
extern PFNGLBLENDEQUATIONSEPARATEPROC _glBlendEquationSeparate;
#define glBlendEquationSeparate _glBlendEquationSeparate
typedef void(__stdcall* PFNGLDRAWBUFFERSPROC)(GLsizei n, const GLenum* bufs);
extern PFNGLDRAWBUFFERSPROC _glDrawBuffers;
#define glDrawBuffers _glDrawBuffers
typedef void(__stdcall* PFNGLSTENCILOPSEPARATEPROC)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
extern PFNGLSTENCILOPSEPARATEPROC _glStencilOpSeparate;
#define glStencilOpSeparate _glStencilOpSeparate
typedef void(__stdcall* PFNGLSTENCILFUNCSEPARATEPROC)(GLenum face, GLenum func, GLint ref, GLuint mask);
extern PFNGLSTENCILFUNCSEPARATEPROC _glStencilFuncSeparate;
#define glStencilFuncSeparate _glStencilFuncSeparate
typedef void(__stdcall* PFNGLSTENCILMASKSEPARATEPROC)(GLenum face, GLuint mask);
extern PFNGLSTENCILMASKSEPARATEPROC _glStencilMaskSeparate;
#define glStencilMaskSeparate _glStencilMaskSeparate
typedef void(__stdcall* PFNGLATTACHSHADERPROC)(GLuint program, GLuint shader);
extern PFNGLATTACHSHADERPROC _glAttachShader;
#define glAttachShader _glAttachShader
typedef void(__stdcall* PFNGLBINDATTRIBLOCATIONPROC)(GLuint program, GLuint index, const GLchar* name);
extern PFNGLBINDATTRIBLOCATIONPROC _glBindAttribLocation;
#define glBindAttribLocation _glBindAttribLocation
typedef void(__stdcall* PFNGLCOMPILESHADERPROC)(GLuint shader);
extern PFNGLCOMPILESHADERPROC _glCompileShader;
#define glCompileShader _glCompileShader
typedef GLuint(__stdcall* PFNGLCREATEPROGRAMPROC)(void);
extern PFNGLCREATEPROGRAMPROC _glCreateProgram;
#define glCreateProgram _glCreateProgram
typedef GLuint(__stdcall* PFNGLCREATESHADERPROC)(GLenum type);
extern PFNGLCREATESHADERPROC _glCreateShader;
#define glCreateShader _glCreateShader
typedef void(__stdcall* PFNGLDELETEPROGRAMPROC)(GLuint program);
extern PFNGLDELETEPROGRAMPROC _glDeleteProgram;
#define glDeleteProgram _glDeleteProgram
typedef void(__stdcall* PFNGLDELETESHADERPROC)(GLuint shader);
extern PFNGLDELETESHADERPROC _glDeleteShader;
#define glDeleteShader _glDeleteShader
typedef void(__stdcall* PFNGLDETACHSHADERPROC)(GLuint program, GLuint shader);
extern PFNGLDETACHSHADERPROC _glDetachShader;
#define glDetachShader _glDetachShader
typedef void(__stdcall* PFNGLDISABLEVERTEXATTRIBARRAYPROC)(GLuint index);
extern PFNGLDISABLEVERTEXATTRIBARRAYPROC _glDisableVertexAttribArray;
#define glDisableVertexAttribArray _glDisableVertexAttribArray
typedef void(__stdcall* PFNGLENABLEVERTEXATTRIBARRAYPROC)(GLuint index);
extern PFNGLENABLEVERTEXATTRIBARRAYPROC _glEnableVertexAttribArray;
#define glEnableVertexAttribArray _glEnableVertexAttribArray
typedef void(__stdcall* PFNGLGETACTIVEATTRIBPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
extern PFNGLGETACTIVEATTRIBPROC _glGetActiveAttrib;
#define glGetActiveAttrib _glGetActiveAttrib
typedef void(__stdcall* PFNGLGETACTIVEUNIFORMPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
extern PFNGLGETACTIVEUNIFORMPROC _glGetActiveUniform;
#define glGetActiveUniform _glGetActiveUniform
typedef void(__stdcall* PFNGLGETATTACHEDSHADERSPROC)(GLuint program, GLsizei maxCount, GLsizei* count, GLuint* shaders);
extern PFNGLGETATTACHEDSHADERSPROC _glGetAttachedShaders;
#define glGetAttachedShaders _glGetAttachedShaders
typedef GLint(__stdcall* PFNGLGETATTRIBLOCATIONPROC)(GLuint program, const GLchar* name);
extern PFNGLGETATTRIBLOCATIONPROC _glGetAttribLocation;
#define glGetAttribLocation _glGetAttribLocation
typedef void(__stdcall* PFNGLGETPROGRAMIVPROC)(GLuint program, GLenum pname, GLint* params);
extern PFNGLGETPROGRAMIVPROC _glGetProgramiv;
#define glGetProgramiv _glGetProgramiv
typedef void(__stdcall* PFNGLGETPROGRAMINFOLOGPROC)(GLuint program, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
extern PFNGLGETPROGRAMINFOLOGPROC _glGetProgramInfoLog;
#define glGetProgramInfoLog _glGetProgramInfoLog
typedef void(__stdcall* PFNGLGETSHADERIVPROC)(GLuint shader, GLenum pname, GLint* params);
extern PFNGLGETSHADERIVPROC _glGetShaderiv;
#define glGetShaderiv _glGetShaderiv
typedef void(__stdcall* PFNGLGETSHADERINFOLOGPROC)(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
extern PFNGLGETSHADERINFOLOGPROC _glGetShaderInfoLog;
#define glGetShaderInfoLog _glGetShaderInfoLog
typedef void(__stdcall* PFNGLGETSHADERSOURCEPROC)(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* source);
extern PFNGLGETSHADERSOURCEPROC _glGetShaderSource;
#define glGetShaderSource _glGetShaderSource
typedef GLint(__stdcall* PFNGLGETUNIFORMLOCATIONPROC)(GLuint program, const GLchar* name);
extern PFNGLGETUNIFORMLOCATIONPROC _glGetUniformLocation;
#define glGetUniformLocation _glGetUniformLocation
typedef void(__stdcall* PFNGLGETUNIFORMFVPROC)(GLuint program, GLint location, GLfloat* params);
extern PFNGLGETUNIFORMFVPROC _glGetUniformfv;
#define glGetUniformfv _glGetUniformfv
typedef void(__stdcall* PFNGLGETUNIFORMIVPROC)(GLuint program, GLint location, GLint* params);
extern PFNGLGETUNIFORMIVPROC _glGetUniformiv;
#define glGetUniformiv _glGetUniformiv
typedef void(__stdcall* PFNGLGETVERTEXATTRIBDVPROC)(GLuint index, GLenum pname, GLdouble* params);
extern PFNGLGETVERTEXATTRIBDVPROC _glGetVertexAttribdv;
#define glGetVertexAttribdv _glGetVertexAttribdv
typedef void(__stdcall* PFNGLGETVERTEXATTRIBFVPROC)(GLuint index, GLenum pname, GLfloat* params);
extern PFNGLGETVERTEXATTRIBFVPROC _glGetVertexAttribfv;
#define glGetVertexAttribfv _glGetVertexAttribfv
typedef void(__stdcall* PFNGLGETVERTEXATTRIBIVPROC)(GLuint index, GLenum pname, GLint* params);
extern PFNGLGETVERTEXATTRIBIVPROC _glGetVertexAttribiv;
#define glGetVertexAttribiv _glGetVertexAttribiv
typedef void(__stdcall* PFNGLGETVERTEXATTRIBPOINTERVPROC)(GLuint index, GLenum pname, void** pointer);
extern PFNGLGETVERTEXATTRIBPOINTERVPROC _glGetVertexAttribPointerv;
#define glGetVertexAttribPointerv _glGetVertexAttribPointerv
typedef GLboolean(__stdcall* PFNGLISPROGRAMPROC)(GLuint program);
extern PFNGLISPROGRAMPROC _glIsProgram;
#define glIsProgram _glIsProgram
typedef GLboolean(__stdcall* PFNGLISSHADERPROC)(GLuint shader);
extern PFNGLISSHADERPROC _glIsShader;
#define glIsShader _glIsShader
typedef void(__stdcall* PFNGLLINKPROGRAMPROC)(GLuint program);
extern PFNGLLINKPROGRAMPROC _glLinkProgram;
#define glLinkProgram _glLinkProgram
typedef void(__stdcall* PFNGLSHADERSOURCEPROC)(GLuint shader, GLsizei count, const GLchar* const* string, const GLint* length);
extern PFNGLSHADERSOURCEPROC _glShaderSource;
#define glShaderSource _glShaderSource
typedef void(__stdcall* PFNGLUSEPROGRAMPROC)(GLuint program);
extern PFNGLUSEPROGRAMPROC _glUseProgram;
#define glUseProgram _glUseProgram
typedef void(__stdcall* PFNGLUNIFORM1FPROC)(GLint location, GLfloat v0);
extern PFNGLUNIFORM1FPROC _glUniform1f;
#define glUniform1f _glUniform1f
typedef void(__stdcall* PFNGLUNIFORM2FPROC)(GLint location, GLfloat v0, GLfloat v1);
extern PFNGLUNIFORM2FPROC _glUniform2f;
#define glUniform2f _glUniform2f
typedef void(__stdcall* PFNGLUNIFORM3FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
extern PFNGLUNIFORM3FPROC _glUniform3f;
#define glUniform3f _glUniform3f
typedef void(__stdcall* PFNGLUNIFORM4FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
extern PFNGLUNIFORM4FPROC _glUniform4f;
#define glUniform4f _glUniform4f
typedef void(__stdcall* PFNGLUNIFORM1IPROC)(GLint location, GLint v0);
extern PFNGLUNIFORM1IPROC _glUniform1i;
#define glUniform1i _glUniform1i
typedef void(__stdcall* PFNGLUNIFORM2IPROC)(GLint location, GLint v0, GLint v1);
extern PFNGLUNIFORM2IPROC _glUniform2i;
#define glUniform2i _glUniform2i
typedef void(__stdcall* PFNGLUNIFORM3IPROC)(GLint location, GLint v0, GLint v1, GLint v2);
extern PFNGLUNIFORM3IPROC _glUniform3i;
#define glUniform3i _glUniform3i
typedef void(__stdcall* PFNGLUNIFORM4IPROC)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
extern PFNGLUNIFORM4IPROC _glUniform4i;
#define glUniform4i _glUniform4i
typedef void(__stdcall* PFNGLUNIFORM1FVPROC)(GLint location, GLsizei count, const GLfloat* value);
extern PFNGLUNIFORM1FVPROC _glUniform1fv;
#define glUniform1fv _glUniform1fv
typedef void(__stdcall* PFNGLUNIFORM2FVPROC)(GLint location, GLsizei count, const GLfloat* value);
extern PFNGLUNIFORM2FVPROC _glUniform2fv;
#define glUniform2fv _glUniform2fv
typedef void(__stdcall* PFNGLUNIFORM3FVPROC)(GLint location, GLsizei count, const GLfloat* value);
extern PFNGLUNIFORM3FVPROC _glUniform3fv;
#define glUniform3fv _glUniform3fv
typedef void(__stdcall* PFNGLUNIFORM4FVPROC)(GLint location, GLsizei count, const GLfloat* value);
extern PFNGLUNIFORM4FVPROC _glUniform4fv;
#define glUniform4fv _glUniform4fv
typedef void(__stdcall* PFNGLUNIFORM1IVPROC)(GLint location, GLsizei count, const GLint* value);
extern PFNGLUNIFORM1IVPROC _glUniform1iv;
#define glUniform1iv _glUniform1iv
typedef void(__stdcall* PFNGLUNIFORM2IVPROC)(GLint location, GLsizei count, const GLint* value);
extern PFNGLUNIFORM2IVPROC _glUniform2iv;
#define glUniform2iv _glUniform2iv
typedef void(__stdcall* PFNGLUNIFORM3IVPROC)(GLint location, GLsizei count, const GLint* value);
extern PFNGLUNIFORM3IVPROC _glUniform3iv;
#define glUniform3iv _glUniform3iv
typedef void(__stdcall* PFNGLUNIFORM4IVPROC)(GLint location, GLsizei count, const GLint* value);
extern PFNGLUNIFORM4IVPROC _glUniform4iv;
#define glUniform4iv _glUniform4iv
typedef void(__stdcall* PFNGLUNIFORMMATRIX2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
extern PFNGLUNIFORMMATRIX2FVPROC _glUniformMatrix2fv;
#define glUniformMatrix2fv _glUniformMatrix2fv
typedef void(__stdcall* PFNGLUNIFORMMATRIX3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
extern PFNGLUNIFORMMATRIX3FVPROC _glUniformMatrix3fv;
#define glUniformMatrix3fv _glUniformMatrix3fv
typedef void(__stdcall* PFNGLUNIFORMMATRIX4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
extern PFNGLUNIFORMMATRIX4FVPROC _glUniformMatrix4fv;
#define glUniformMatrix4fv _glUniformMatrix4fv
typedef void(__stdcall* PFNGLVALIDATEPROGRAMPROC)(GLuint program);
extern PFNGLVALIDATEPROGRAMPROC _glValidateProgram;
#define glValidateProgram _glValidateProgram
typedef void(__stdcall* PFNGLVERTEXATTRIB1DPROC)(GLuint index, GLdouble x);
extern PFNGLVERTEXATTRIB1DPROC _glVertexAttrib1d;
#define glVertexAttrib1d _glVertexAttrib1d
typedef void(__stdcall* PFNGLVERTEXATTRIB1DVPROC)(GLuint index, const GLdouble* v);
extern PFNGLVERTEXATTRIB1DVPROC _glVertexAttrib1dv;
#define glVertexAttrib1dv _glVertexAttrib1dv
typedef void(__stdcall* PFNGLVERTEXATTRIB1FPROC)(GLuint index, GLfloat x);
extern PFNGLVERTEXATTRIB1FPROC _glVertexAttrib1f;
#define glVertexAttrib1f _glVertexAttrib1f
typedef void(__stdcall* PFNGLVERTEXATTRIB1FVPROC)(GLuint index, const GLfloat* v);
extern PFNGLVERTEXATTRIB1FVPROC _glVertexAttrib1fv;
#define glVertexAttrib1fv _glVertexAttrib1fv
typedef void(__stdcall* PFNGLVERTEXATTRIB1SPROC)(GLuint index, GLshort x);
extern PFNGLVERTEXATTRIB1SPROC _glVertexAttrib1s;
#define glVertexAttrib1s _glVertexAttrib1s
typedef void(__stdcall* PFNGLVERTEXATTRIB1SVPROC)(GLuint index, const GLshort* v);
extern PFNGLVERTEXATTRIB1SVPROC _glVertexAttrib1sv;
#define glVertexAttrib1sv _glVertexAttrib1sv
typedef void(__stdcall* PFNGLVERTEXATTRIB2DPROC)(GLuint index, GLdouble x, GLdouble y);
extern PFNGLVERTEXATTRIB2DPROC _glVertexAttrib2d;
#define glVertexAttrib2d _glVertexAttrib2d
typedef void(__stdcall* PFNGLVERTEXATTRIB2DVPROC)(GLuint index, const GLdouble* v);
extern PFNGLVERTEXATTRIB2DVPROC _glVertexAttrib2dv;
#define glVertexAttrib2dv _glVertexAttrib2dv
typedef void(__stdcall* PFNGLVERTEXATTRIB2FPROC)(GLuint index, GLfloat x, GLfloat y);
extern PFNGLVERTEXATTRIB2FPROC _glVertexAttrib2f;
#define glVertexAttrib2f _glVertexAttrib2f
typedef void(__stdcall* PFNGLVERTEXATTRIB2FVPROC)(GLuint index, const GLfloat* v);
extern PFNGLVERTEXATTRIB2FVPROC _glVertexAttrib2fv;
#define glVertexAttrib2fv _glVertexAttrib2fv
typedef void(__stdcall* PFNGLVERTEXATTRIB2SPROC)(GLuint index, GLshort x, GLshort y);
extern PFNGLVERTEXATTRIB2SPROC _glVertexAttrib2s;
#define glVertexAttrib2s _glVertexAttrib2s
typedef void(__stdcall* PFNGLVERTEXATTRIB2SVPROC)(GLuint index, const GLshort* v);
extern PFNGLVERTEXATTRIB2SVPROC _glVertexAttrib2sv;
#define glVertexAttrib2sv _glVertexAttrib2sv
typedef void(__stdcall* PFNGLVERTEXATTRIB3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
extern PFNGLVERTEXATTRIB3DPROC _glVertexAttrib3d;
#define glVertexAttrib3d _glVertexAttrib3d
typedef void(__stdcall* PFNGLVERTEXATTRIB3DVPROC)(GLuint index, const GLdouble* v);
extern PFNGLVERTEXATTRIB3DVPROC _glVertexAttrib3dv;
#define glVertexAttrib3dv _glVertexAttrib3dv
typedef void(__stdcall* PFNGLVERTEXATTRIB3FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
extern PFNGLVERTEXATTRIB3FPROC _glVertexAttrib3f;
#define glVertexAttrib3f _glVertexAttrib3f
typedef void(__stdcall* PFNGLVERTEXATTRIB3FVPROC)(GLuint index, const GLfloat* v);
extern PFNGLVERTEXATTRIB3FVPROC _glVertexAttrib3fv;
#define glVertexAttrib3fv _glVertexAttrib3fv
typedef void(__stdcall* PFNGLVERTEXATTRIB3SPROC)(GLuint index, GLshort x, GLshort y, GLshort z);
extern PFNGLVERTEXATTRIB3SPROC _glVertexAttrib3s;
#define glVertexAttrib3s _glVertexAttrib3s
typedef void(__stdcall* PFNGLVERTEXATTRIB3SVPROC)(GLuint index, const GLshort* v);
extern PFNGLVERTEXATTRIB3SVPROC _glVertexAttrib3sv;
#define glVertexAttrib3sv _glVertexAttrib3sv
typedef void(__stdcall* PFNGLVERTEXATTRIB4NBVPROC)(GLuint index, const GLbyte* v);
extern PFNGLVERTEXATTRIB4NBVPROC _glVertexAttrib4Nbv;
#define glVertexAttrib4Nbv _glVertexAttrib4Nbv
typedef void(__stdcall* PFNGLVERTEXATTRIB4NIVPROC)(GLuint index, const GLint* v);
extern PFNGLVERTEXATTRIB4NIVPROC _glVertexAttrib4Niv;
#define glVertexAttrib4Niv _glVertexAttrib4Niv
typedef void(__stdcall* PFNGLVERTEXATTRIB4NSVPROC)(GLuint index, const GLshort* v);
extern PFNGLVERTEXATTRIB4NSVPROC _glVertexAttrib4Nsv;
#define glVertexAttrib4Nsv _glVertexAttrib4Nsv
typedef void(__stdcall* PFNGLVERTEXATTRIB4NUBPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
extern PFNGLVERTEXATTRIB4NUBPROC _glVertexAttrib4Nub;
#define glVertexAttrib4Nub _glVertexAttrib4Nub
typedef void(__stdcall* PFNGLVERTEXATTRIB4NUBVPROC)(GLuint index, const GLubyte* v);
extern PFNGLVERTEXATTRIB4NUBVPROC _glVertexAttrib4Nubv;
#define glVertexAttrib4Nubv _glVertexAttrib4Nubv
typedef void(__stdcall* PFNGLVERTEXATTRIB4NUIVPROC)(GLuint index, const GLuint* v);
extern PFNGLVERTEXATTRIB4NUIVPROC _glVertexAttrib4Nuiv;
#define glVertexAttrib4Nuiv _glVertexAttrib4Nuiv
typedef void(__stdcall* PFNGLVERTEXATTRIB4NUSVPROC)(GLuint index, const GLushort* v);
extern PFNGLVERTEXATTRIB4NUSVPROC _glVertexAttrib4Nusv;
#define glVertexAttrib4Nusv _glVertexAttrib4Nusv
typedef void(__stdcall* PFNGLVERTEXATTRIB4BVPROC)(GLuint index, const GLbyte* v);
extern PFNGLVERTEXATTRIB4BVPROC _glVertexAttrib4bv;
#define glVertexAttrib4bv _glVertexAttrib4bv
typedef void(__stdcall* PFNGLVERTEXATTRIB4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
extern PFNGLVERTEXATTRIB4DPROC _glVertexAttrib4d;
#define glVertexAttrib4d _glVertexAttrib4d
typedef void(__stdcall* PFNGLVERTEXATTRIB4DVPROC)(GLuint index, const GLdouble* v);
extern PFNGLVERTEXATTRIB4DVPROC _glVertexAttrib4dv;
#define glVertexAttrib4dv _glVertexAttrib4dv
typedef void(__stdcall* PFNGLVERTEXATTRIB4FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
extern PFNGLVERTEXATTRIB4FPROC _glVertexAttrib4f;
#define glVertexAttrib4f _glVertexAttrib4f
typedef void(__stdcall* PFNGLVERTEXATTRIB4FVPROC)(GLuint index, const GLfloat* v);
extern PFNGLVERTEXATTRIB4FVPROC _glVertexAttrib4fv;
#define glVertexAttrib4fv _glVertexAttrib4fv
typedef void(__stdcall* PFNGLVERTEXATTRIB4IVPROC)(GLuint index, const GLint* v);
extern PFNGLVERTEXATTRIB4IVPROC _glVertexAttrib4iv;
#define glVertexAttrib4iv _glVertexAttrib4iv
typedef void(__stdcall* PFNGLVERTEXATTRIB4SPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
extern PFNGLVERTEXATTRIB4SPROC _glVertexAttrib4s;
#define glVertexAttrib4s _glVertexAttrib4s
typedef void(__stdcall* PFNGLVERTEXATTRIB4SVPROC)(GLuint index, const GLshort* v);
extern PFNGLVERTEXATTRIB4SVPROC _glVertexAttrib4sv;
#define glVertexAttrib4sv _glVertexAttrib4sv
typedef void(__stdcall* PFNGLVERTEXATTRIB4UBVPROC)(GLuint index, const GLubyte* v);
extern PFNGLVERTEXATTRIB4UBVPROC _glVertexAttrib4ubv;
#define glVertexAttrib4ubv _glVertexAttrib4ubv
typedef void(__stdcall* PFNGLVERTEXATTRIB4UIVPROC)(GLuint index, const GLuint* v);
extern PFNGLVERTEXATTRIB4UIVPROC _glVertexAttrib4uiv;
#define glVertexAttrib4uiv _glVertexAttrib4uiv
typedef void(__stdcall* PFNGLVERTEXATTRIB4USVPROC)(GLuint index, const GLushort* v);
extern PFNGLVERTEXATTRIB4USVPROC _glVertexAttrib4usv;
#define glVertexAttrib4usv _glVertexAttrib4usv
typedef void(__stdcall* PFNGLVERTEXATTRIBPOINTERPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* pointer);
extern PFNGLVERTEXATTRIBPOINTERPROC _glVertexAttribPointer;
#define glVertexAttribPointer _glVertexAttribPointer
#pragma endregion

#pragma region OpenGL 2.1 functions
typedef void(__stdcall* PFNGLUNIFORMMATRIX2X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
extern PFNGLUNIFORMMATRIX2X3FVPROC _glUniformMatrix2x3fv;
#define glUniformMatrix2x3fv _glUniformMatrix2x3fv
typedef void(__stdcall* PFNGLUNIFORMMATRIX3X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
extern PFNGLUNIFORMMATRIX3X2FVPROC _glUniformMatrix3x2fv;
#define glUniformMatrix3x2fv _glUniformMatrix3x2fv
typedef void(__stdcall* PFNGLUNIFORMMATRIX2X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
extern PFNGLUNIFORMMATRIX2X4FVPROC _glUniformMatrix2x4fv;
#define glUniformMatrix2x4fv _glUniformMatrix2x4fv
typedef void(__stdcall* PFNGLUNIFORMMATRIX4X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
extern PFNGLUNIFORMMATRIX4X2FVPROC _glUniformMatrix4x2fv;
#define glUniformMatrix4x2fv _glUniformMatrix4x2fv
typedef void(__stdcall* PFNGLUNIFORMMATRIX3X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
extern PFNGLUNIFORMMATRIX3X4FVPROC _glUniformMatrix3x4fv;
#define glUniformMatrix3x4fv _glUniformMatrix3x4fv
typedef void(__stdcall* PFNGLUNIFORMMATRIX4X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
extern PFNGLUNIFORMMATRIX4X3FVPROC _glUniformMatrix4x3fv;
#define glUniformMatrix4x3fv _glUniformMatrix4x3fv
#pragma endregion

#pragma region OpenGL 3.0 functions
typedef void(__stdcall* PFNGLCOLORMASKIPROC)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
extern PFNGLCOLORMASKIPROC _glColorMaski;
#define glColorMaski _glColorMaski
typedef void(__stdcall* PFNGLGETBOOLEANI_VPROC)(GLenum target, GLuint index, GLboolean* data);
extern PFNGLGETBOOLEANI_VPROC _glGetBooleani_v;
#define glGetBooleani_v _glGetBooleani_v
typedef void(__stdcall* PFNGLGETINTEGERI_VPROC)(GLenum target, GLuint index, GLint* data);
extern PFNGLGETINTEGERI_VPROC _glGetIntegeri_v;
#define glGetIntegeri_v _glGetIntegeri_v
typedef void(__stdcall* PFNGLENABLEIPROC)(GLenum target, GLuint index);
extern PFNGLENABLEIPROC _glEnablei;
#define glEnablei _glEnablei
typedef void(__stdcall* PFNGLDISABLEIPROC)(GLenum target, GLuint index);
extern PFNGLDISABLEIPROC _glDisablei;
#define glDisablei _glDisablei
typedef GLboolean(__stdcall* PFNGLISENABLEDIPROC)(GLenum target, GLuint index);
extern PFNGLISENABLEDIPROC _glIsEnabledi;
#define glIsEnabledi _glIsEnabledi
typedef void(__stdcall* PFNGLBEGINTRANSFORMFEEDBACKPROC)(GLenum primitiveMode);
extern PFNGLBEGINTRANSFORMFEEDBACKPROC _glBeginTransformFeedback;
#define glBeginTransformFeedback _glBeginTransformFeedback
typedef void(__stdcall* PFNGLENDTRANSFORMFEEDBACKPROC)(void);
extern PFNGLENDTRANSFORMFEEDBACKPROC _glEndTransformFeedback;
#define glEndTransformFeedback _glEndTransformFeedback
typedef void(__stdcall* PFNGLBINDBUFFERRANGEPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
extern PFNGLBINDBUFFERRANGEPROC _glBindBufferRange;
#define glBindBufferRange _glBindBufferRange
typedef void(__stdcall* PFNGLBINDBUFFERBASEPROC)(GLenum target, GLuint index, GLuint buffer);
extern PFNGLBINDBUFFERBASEPROC _glBindBufferBase;
#define glBindBufferBase _glBindBufferBase
typedef void(__stdcall* PFNGLTRANSFORMFEEDBACKVARYINGSPROC)(GLuint program, GLsizei count, const GLchar* const* varyings, GLenum bufferMode);
extern PFNGLTRANSFORMFEEDBACKVARYINGSPROC _glTransformFeedbackVaryings;
#define glTransformFeedbackVaryings _glTransformFeedbackVaryings
typedef void(__stdcall* PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GLenum* type, GLchar* name);
extern PFNGLGETTRANSFORMFEEDBACKVARYINGPROC _glGetTransformFeedbackVarying;
#define glGetTransformFeedbackVarying _glGetTransformFeedbackVarying
typedef void(__stdcall* PFNGLCLAMPCOLORPROC)(GLenum target, GLenum clamp);
extern PFNGLCLAMPCOLORPROC _glClampColor;
#define glClampColor _glClampColor
typedef void(__stdcall* PFNGLBEGINCONDITIONALRENDERPROC)(GLuint id, GLenum mode);
extern PFNGLBEGINCONDITIONALRENDERPROC _glBeginConditionalRender;
#define glBeginConditionalRender _glBeginConditionalRender
typedef void(__stdcall* PFNGLENDCONDITIONALRENDERPROC)(void);
extern PFNGLENDCONDITIONALRENDERPROC _glEndConditionalRender;
#define glEndConditionalRender _glEndConditionalRender
typedef void(__stdcall* PFNGLVERTEXATTRIBIPOINTERPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer);
extern PFNGLVERTEXATTRIBIPOINTERPROC _glVertexAttribIPointer;
#define glVertexAttribIPointer _glVertexAttribIPointer
typedef void(__stdcall* PFNGLGETVERTEXATTRIBIIVPROC)(GLuint index, GLenum pname, GLint* params);
extern PFNGLGETVERTEXATTRIBIIVPROC _glGetVertexAttribIiv;
#define glGetVertexAttribIiv _glGetVertexAttribIiv
typedef void(__stdcall* PFNGLGETVERTEXATTRIBIUIVPROC)(GLuint index, GLenum pname, GLuint* params);
extern PFNGLGETVERTEXATTRIBIUIVPROC _glGetVertexAttribIuiv;
#define glGetVertexAttribIuiv _glGetVertexAttribIuiv
typedef void(__stdcall* PFNGLVERTEXATTRIBI1IPROC)(GLuint index, GLint x);
extern PFNGLVERTEXATTRIBI1IPROC _glVertexAttribI1i;
#define glVertexAttribI1i _glVertexAttribI1i
typedef void(__stdcall* PFNGLVERTEXATTRIBI2IPROC)(GLuint index, GLint x, GLint y);
extern PFNGLVERTEXATTRIBI2IPROC _glVertexAttribI2i;
#define glVertexAttribI2i _glVertexAttribI2i
typedef void(__stdcall* PFNGLVERTEXATTRIBI3IPROC)(GLuint index, GLint x, GLint y, GLint z);
extern PFNGLVERTEXATTRIBI3IPROC _glVertexAttribI3i;
#define glVertexAttribI3i _glVertexAttribI3i
typedef void(__stdcall* PFNGLVERTEXATTRIBI4IPROC)(GLuint index, GLint x, GLint y, GLint z, GLint w);
extern PFNGLVERTEXATTRIBI4IPROC _glVertexAttribI4i;
#define glVertexAttribI4i _glVertexAttribI4i
typedef void(__stdcall* PFNGLVERTEXATTRIBI1UIPROC)(GLuint index, GLuint x);
extern PFNGLVERTEXATTRIBI1UIPROC _glVertexAttribI1ui;
#define glVertexAttribI1ui _glVertexAttribI1ui
typedef void(__stdcall* PFNGLVERTEXATTRIBI2UIPROC)(GLuint index, GLuint x, GLuint y);
extern PFNGLVERTEXATTRIBI2UIPROC _glVertexAttribI2ui;
#define glVertexAttribI2ui _glVertexAttribI2ui
typedef void(__stdcall* PFNGLVERTEXATTRIBI3UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z);
extern PFNGLVERTEXATTRIBI3UIPROC _glVertexAttribI3ui;
#define glVertexAttribI3ui _glVertexAttribI3ui
typedef void(__stdcall* PFNGLVERTEXATTRIBI4UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
extern PFNGLVERTEXATTRIBI4UIPROC _glVertexAttribI4ui;
#define glVertexAttribI4ui _glVertexAttribI4ui
typedef void(__stdcall* PFNGLVERTEXATTRIBI1IVPROC)(GLuint index, const GLint* v);
extern PFNGLVERTEXATTRIBI1IVPROC _glVertexAttribI1iv;
#define glVertexAttribI1iv _glVertexAttribI1iv
typedef void(__stdcall* PFNGLVERTEXATTRIBI2IVPROC)(GLuint index, const GLint* v);
extern PFNGLVERTEXATTRIBI2IVPROC _glVertexAttribI2iv;
#define glVertexAttribI2iv _glVertexAttribI2iv
typedef void(__stdcall* PFNGLVERTEXATTRIBI3IVPROC)(GLuint index, const GLint* v);
extern PFNGLVERTEXATTRIBI3IVPROC _glVertexAttribI3iv;
#define glVertexAttribI3iv _glVertexAttribI3iv
typedef void(__stdcall* PFNGLVERTEXATTRIBI4IVPROC)(GLuint index, const GLint* v);
extern PFNGLVERTEXATTRIBI4IVPROC _glVertexAttribI4iv;
#define glVertexAttribI4iv _glVertexAttribI4iv
typedef void(__stdcall* PFNGLVERTEXATTRIBI1UIVPROC)(GLuint index, const GLuint* v);
extern PFNGLVERTEXATTRIBI1UIVPROC _glVertexAttribI1uiv;
#define glVertexAttribI1uiv _glVertexAttribI1uiv
typedef void(__stdcall* PFNGLVERTEXATTRIBI2UIVPROC)(GLuint index, const GLuint* v);
extern PFNGLVERTEXATTRIBI2UIVPROC _glVertexAttribI2uiv;
#define glVertexAttribI2uiv _glVertexAttribI2uiv
typedef void(__stdcall* PFNGLVERTEXATTRIBI3UIVPROC)(GLuint index, const GLuint* v);
extern PFNGLVERTEXATTRIBI3UIVPROC _glVertexAttribI3uiv;
#define glVertexAttribI3uiv _glVertexAttribI3uiv
typedef void(__stdcall* PFNGLVERTEXATTRIBI4UIVPROC)(GLuint index, const GLuint* v);
extern PFNGLVERTEXATTRIBI4UIVPROC _glVertexAttribI4uiv;
#define glVertexAttribI4uiv _glVertexAttribI4uiv
typedef void(__stdcall* PFNGLVERTEXATTRIBI4BVPROC)(GLuint index, const GLbyte* v);
extern PFNGLVERTEXATTRIBI4BVPROC _glVertexAttribI4bv;
#define glVertexAttribI4bv _glVertexAttribI4bv
typedef void(__stdcall* PFNGLVERTEXATTRIBI4SVPROC)(GLuint index, const GLshort* v);
extern PFNGLVERTEXATTRIBI4SVPROC _glVertexAttribI4sv;
#define glVertexAttribI4sv _glVertexAttribI4sv
typedef void(__stdcall* PFNGLVERTEXATTRIBI4UBVPROC)(GLuint index, const GLubyte* v);
extern PFNGLVERTEXATTRIBI4UBVPROC _glVertexAttribI4ubv;
#define glVertexAttribI4ubv _glVertexAttribI4ubv
typedef void(__stdcall* PFNGLVERTEXATTRIBI4USVPROC)(GLuint index, const GLushort* v);
extern PFNGLVERTEXATTRIBI4USVPROC _glVertexAttribI4usv;
#define glVertexAttribI4usv _glVertexAttribI4usv
typedef void(__stdcall* PFNGLGETUNIFORMUIVPROC)(GLuint program, GLint location, GLuint* params);
extern PFNGLGETUNIFORMUIVPROC _glGetUniformuiv;
#define glGetUniformuiv _glGetUniformuiv
typedef void(__stdcall* PFNGLBINDFRAGDATALOCATIONPROC)(GLuint program, GLuint color, const GLchar* name);
extern PFNGLBINDFRAGDATALOCATIONPROC _glBindFragDataLocation;
#define glBindFragDataLocation _glBindFragDataLocation
typedef GLint(__stdcall* PFNGLGETFRAGDATALOCATIONPROC)(GLuint program, const GLchar* name);
extern PFNGLGETFRAGDATALOCATIONPROC _glGetFragDataLocation;
#define glGetFragDataLocation _glGetFragDataLocation
typedef void(__stdcall* PFNGLUNIFORM1UIPROC)(GLint location, GLuint v0);
extern PFNGLUNIFORM1UIPROC _glUniform1ui;
#define glUniform1ui _glUniform1ui
typedef void(__stdcall* PFNGLUNIFORM2UIPROC)(GLint location, GLuint v0, GLuint v1);
extern PFNGLUNIFORM2UIPROC _glUniform2ui;
#define glUniform2ui _glUniform2ui
typedef void(__stdcall* PFNGLUNIFORM3UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2);
extern PFNGLUNIFORM3UIPROC _glUniform3ui;
#define glUniform3ui _glUniform3ui
typedef void(__stdcall* PFNGLUNIFORM4UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
extern PFNGLUNIFORM4UIPROC _glUniform4ui;
#define glUniform4ui _glUniform4ui
typedef void(__stdcall* PFNGLUNIFORM1UIVPROC)(GLint location, GLsizei count, const GLuint* value);
extern PFNGLUNIFORM1UIVPROC _glUniform1uiv;
#define glUniform1uiv _glUniform1uiv
typedef void(__stdcall* PFNGLUNIFORM2UIVPROC)(GLint location, GLsizei count, const GLuint* value);
extern PFNGLUNIFORM2UIVPROC _glUniform2uiv;
#define glUniform2uiv _glUniform2uiv
typedef void(__stdcall* PFNGLUNIFORM3UIVPROC)(GLint location, GLsizei count, const GLuint* value);
extern PFNGLUNIFORM3UIVPROC _glUniform3uiv;
#define glUniform3uiv _glUniform3uiv
typedef void(__stdcall* PFNGLUNIFORM4UIVPROC)(GLint location, GLsizei count, const GLuint* value);
extern PFNGLUNIFORM4UIVPROC _glUniform4uiv;
#define glUniform4uiv _glUniform4uiv
typedef void(__stdcall* PFNGLTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, const GLint* params);
extern PFNGLTEXPARAMETERIIVPROC _glTexParameterIiv;
#define glTexParameterIiv _glTexParameterIiv
typedef void(__stdcall* PFNGLTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, const GLuint* params);
extern PFNGLTEXPARAMETERIUIVPROC _glTexParameterIuiv;
#define glTexParameterIuiv _glTexParameterIuiv
typedef void(__stdcall* PFNGLGETTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, GLint* params);
extern PFNGLGETTEXPARAMETERIIVPROC _glGetTexParameterIiv;
#define glGetTexParameterIiv _glGetTexParameterIiv
typedef void(__stdcall* PFNGLGETTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, GLuint* params);
extern PFNGLGETTEXPARAMETERIUIVPROC _glGetTexParameterIuiv;
#define glGetTexParameterIuiv _glGetTexParameterIuiv
typedef void(__stdcall* PFNGLCLEARBUFFERIVPROC)(GLenum buffer, GLint drawbuffer, const GLint* value);
extern PFNGLCLEARBUFFERIVPROC _glClearBufferiv;
#define glClearBufferiv _glClearBufferiv
typedef void(__stdcall* PFNGLCLEARBUFFERUIVPROC)(GLenum buffer, GLint drawbuffer, const GLuint* value);
extern PFNGLCLEARBUFFERUIVPROC _glClearBufferuiv;
#define glClearBufferuiv _glClearBufferuiv
typedef void(__stdcall* PFNGLCLEARBUFFERFVPROC)(GLenum buffer, GLint drawbuffer, const GLfloat* value);
extern PFNGLCLEARBUFFERFVPROC _glClearBufferfv;
#define glClearBufferfv _glClearBufferfv
typedef void(__stdcall* PFNGLCLEARBUFFERFIPROC)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
extern PFNGLCLEARBUFFERFIPROC _glClearBufferfi;
#define glClearBufferfi _glClearBufferfi
typedef const GLubyte* (__stdcall* PFNGLGETSTRINGIPROC)(GLenum name, GLuint index);
extern PFNGLGETSTRINGIPROC _glGetStringi;
#define glGetStringi _glGetStringi
typedef GLboolean(__stdcall* PFNGLISRENDERBUFFERPROC)(GLuint renderbuffer);
extern PFNGLISRENDERBUFFERPROC _glIsRenderbuffer;
#define glIsRenderbuffer _glIsRenderbuffer
typedef void(__stdcall* PFNGLBINDRENDERBUFFERPROC)(GLenum target, GLuint renderbuffer);
extern PFNGLBINDRENDERBUFFERPROC _glBindRenderbuffer;
#define glBindRenderbuffer _glBindRenderbuffer
typedef void(__stdcall* PFNGLDELETERENDERBUFFERSPROC)(GLsizei n, const GLuint* renderbuffers);
extern PFNGLDELETERENDERBUFFERSPROC _glDeleteRenderbuffers;
#define glDeleteRenderbuffers _glDeleteRenderbuffers
typedef void(__stdcall* PFNGLGENRENDERBUFFERSPROC)(GLsizei n, GLuint* renderbuffers);
extern PFNGLGENRENDERBUFFERSPROC _glGenRenderbuffers;
#define glGenRenderbuffers _glGenRenderbuffers
typedef void(__stdcall* PFNGLRENDERBUFFERSTORAGEPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
extern PFNGLRENDERBUFFERSTORAGEPROC _glRenderbufferStorage;
#define glRenderbufferStorage _glRenderbufferStorage
typedef void(__stdcall* PFNGLGETRENDERBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint* params);
extern PFNGLGETRENDERBUFFERPARAMETERIVPROC _glGetRenderbufferParameteriv;
#define glGetRenderbufferParameteriv _glGetRenderbufferParameteriv
typedef GLboolean(__stdcall* PFNGLISFRAMEBUFFERPROC)(GLuint framebuffer);
extern PFNGLISFRAMEBUFFERPROC _glIsFramebuffer;
#define glIsFramebuffer _glIsFramebuffer
typedef void(__stdcall* PFNGLBINDFRAMEBUFFERPROC)(GLenum target, GLuint framebuffer);
extern PFNGLBINDFRAMEBUFFERPROC _glBindFramebuffer;
#define glBindFramebuffer _glBindFramebuffer
typedef void(__stdcall* PFNGLDELETEFRAMEBUFFERSPROC)(GLsizei n, const GLuint* framebuffers);
extern PFNGLDELETEFRAMEBUFFERSPROC _glDeleteFramebuffers;
#define glDeleteFramebuffers _glDeleteFramebuffers
typedef void(__stdcall* PFNGLGENFRAMEBUFFERSPROC)(GLsizei n, GLuint* framebuffers);
extern PFNGLGENFRAMEBUFFERSPROC _glGenFramebuffers;
#define glGenFramebuffers _glGenFramebuffers
typedef GLenum(__stdcall* PFNGLCHECKFRAMEBUFFERSTATUSPROC)(GLenum target);
extern PFNGLCHECKFRAMEBUFFERSTATUSPROC _glCheckFramebufferStatus;
#define glCheckFramebufferStatus _glCheckFramebufferStatus
typedef void(__stdcall* PFNGLFRAMEBUFFERTEXTURE1DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
extern PFNGLFRAMEBUFFERTEXTURE1DPROC _glFramebufferTexture1D;
#define glFramebufferTexture1D _glFramebufferTexture1D
typedef void(__stdcall* PFNGLFRAMEBUFFERTEXTURE2DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
extern PFNGLFRAMEBUFFERTEXTURE2DPROC _glFramebufferTexture2D;
#define glFramebufferTexture2D _glFramebufferTexture2D
typedef void(__stdcall* PFNGLFRAMEBUFFERTEXTURE3DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
extern PFNGLFRAMEBUFFERTEXTURE3DPROC _glFramebufferTexture3D;
#define glFramebufferTexture3D _glFramebufferTexture3D
typedef void(__stdcall* PFNGLFRAMEBUFFERRENDERBUFFERPROC)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
extern PFNGLFRAMEBUFFERRENDERBUFFERPROC _glFramebufferRenderbuffer;
#define glFramebufferRenderbuffer _glFramebufferRenderbuffer
typedef void(__stdcall* PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLenum target, GLenum attachment, GLenum pname, GLint* params);
extern PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC _glGetFramebufferAttachmentParameteriv;
#define glGetFramebufferAttachmentParameteriv _glGetFramebufferAttachmentParameteriv
typedef void(__stdcall* PFNGLGENERATEMIPMAPPROC)(GLenum target);
extern PFNGLGENERATEMIPMAPPROC _glGenerateMipmap;
#define glGenerateMipmap _glGenerateMipmap
typedef void(__stdcall* PFNGLBLITFRAMEBUFFERPROC)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
extern PFNGLBLITFRAMEBUFFERPROC _glBlitFramebuffer;
#define glBlitFramebuffer _glBlitFramebuffer
typedef void(__stdcall* PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
extern PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC _glRenderbufferStorageMultisample;
#define glRenderbufferStorageMultisample _glRenderbufferStorageMultisample
typedef void(__stdcall* PFNGLFRAMEBUFFERTEXTURELAYERPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
extern PFNGLFRAMEBUFFERTEXTURELAYERPROC _glFramebufferTextureLayer;
#define glFramebufferTextureLayer _glFramebufferTextureLayer
typedef void* (__stdcall* PFNGLMAPBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
extern PFNGLMAPBUFFERRANGEPROC _glMapBufferRange;
#define glMapBufferRange _glMapBufferRange
typedef void(__stdcall* PFNGLFLUSHMAPPEDBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length);
extern PFNGLFLUSHMAPPEDBUFFERRANGEPROC _glFlushMappedBufferRange;
#define glFlushMappedBufferRange _glFlushMappedBufferRange
typedef void(__stdcall* PFNGLBINDVERTEXARRAYPROC)(GLuint array);
extern PFNGLBINDVERTEXARRAYPROC _glBindVertexArray;
#define glBindVertexArray _glBindVertexArray
typedef void(__stdcall* PFNGLDELETEVERTEXARRAYSPROC)(GLsizei n, const GLuint* arrays);
extern PFNGLDELETEVERTEXARRAYSPROC _glDeleteVertexArrays;
#define glDeleteVertexArrays _glDeleteVertexArrays
typedef void(__stdcall* PFNGLGENVERTEXARRAYSPROC)(GLsizei n, GLuint* arrays);
extern PFNGLGENVERTEXARRAYSPROC _glGenVertexArrays;
#define glGenVertexArrays _glGenVertexArrays
typedef GLboolean(__stdcall* PFNGLISVERTEXARRAYPROC)(GLuint array);
extern PFNGLISVERTEXARRAYPROC _glIsVertexArray;
#define glIsVertexArray _glIsVertexArray
#pragma endregion

#pragma region OpenGL 3.1 functions
typedef void(__stdcall* PFNGLDRAWARRAYSINSTANCEDPROC)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
extern PFNGLDRAWARRAYSINSTANCEDPROC _glDrawArraysInstanced;
#define glDrawArraysInstanced _glDrawArraysInstanced
typedef void(__stdcall* PFNGLDRAWELEMENTSINSTANCEDPROC)(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei instancecount);
extern PFNGLDRAWELEMENTSINSTANCEDPROC _glDrawElementsInstanced;
#define glDrawElementsInstanced _glDrawElementsInstanced
typedef void(__stdcall* PFNGLTEXBUFFERPROC)(GLenum target, GLenum internalformat, GLuint buffer);
extern PFNGLTEXBUFFERPROC _glTexBuffer;
#define glTexBuffer _glTexBuffer
typedef void(__stdcall* PFNGLPRIMITIVERESTARTINDEXPROC)(GLuint index);
extern PFNGLPRIMITIVERESTARTINDEXPROC _glPrimitiveRestartIndex;
#define glPrimitiveRestartIndex _glPrimitiveRestartIndex
typedef void(__stdcall* PFNGLCOPYBUFFERSUBDATAPROC)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
extern PFNGLCOPYBUFFERSUBDATAPROC _glCopyBufferSubData;
#define glCopyBufferSubData _glCopyBufferSubData
typedef void(__stdcall* PFNGLGETUNIFORMINDICESPROC)(GLuint program, GLsizei uniformCount, const GLchar* const* uniformNames, GLuint* uniformIndices);
extern PFNGLGETUNIFORMINDICESPROC _glGetUniformIndices;
#define glGetUniformIndices _glGetUniformIndices
typedef void(__stdcall* PFNGLGETACTIVEUNIFORMSIVPROC)(GLuint program, GLsizei uniformCount, const GLuint* uniformIndices, GLenum pname, GLint* params);
extern PFNGLGETACTIVEUNIFORMSIVPROC _glGetActiveUniformsiv;
#define glGetActiveUniformsiv _glGetActiveUniformsiv
typedef void(__stdcall* PFNGLGETACTIVEUNIFORMNAMEPROC)(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformName);
extern PFNGLGETACTIVEUNIFORMNAMEPROC _glGetActiveUniformName;
#define glGetActiveUniformName _glGetActiveUniformName
typedef GLuint(__stdcall* PFNGLGETUNIFORMBLOCKINDEXPROC)(GLuint program, const GLchar* uniformBlockName);
extern PFNGLGETUNIFORMBLOCKINDEXPROC _glGetUniformBlockIndex;
#define glGetUniformBlockIndex _glGetUniformBlockIndex
typedef void(__stdcall* PFNGLGETACTIVEUNIFORMBLOCKIVPROC)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint* params);
extern PFNGLGETACTIVEUNIFORMBLOCKIVPROC _glGetActiveUniformBlockiv;
#define glGetActiveUniformBlockiv _glGetActiveUniformBlockiv
typedef void(__stdcall* PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformBlockName);
extern PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC _glGetActiveUniformBlockName;
#define glGetActiveUniformBlockName _glGetActiveUniformBlockName
typedef void(__stdcall* PFNGLUNIFORMBLOCKBINDINGPROC)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
extern PFNGLUNIFORMBLOCKBINDINGPROC _glUniformBlockBinding;
#define glUniformBlockBinding _glUniformBlockBinding
#pragma endregion

#pragma region OpenGL 3.2 functions
typedef void(__stdcall* PFNGLDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void* indices, GLint basevertex);
extern PFNGLDRAWELEMENTSBASEVERTEXPROC _glDrawElementsBaseVertex;
#define glDrawElementsBaseVertex _glDrawElementsBaseVertex
typedef void(__stdcall* PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void* indices, GLint basevertex);
extern PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC _glDrawRangeElementsBaseVertex;
#define glDrawRangeElementsBaseVertex _glDrawRangeElementsBaseVertex
typedef void(__stdcall* PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei instancecount, GLint basevertex);
extern PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC _glDrawElementsInstancedBaseVertex;
#define glDrawElementsInstancedBaseVertex _glDrawElementsInstancedBaseVertex
typedef void(__stdcall* PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, const GLsizei* count, GLenum type, const void* const* indices, GLsizei drawcount, const GLint* basevertex);
extern PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC _glMultiDrawElementsBaseVertex;
#define glMultiDrawElementsBaseVertex _glMultiDrawElementsBaseVertex
typedef void(__stdcall* PFNGLPROVOKINGVERTEXPROC)(GLenum mode);
extern PFNGLPROVOKINGVERTEXPROC _glProvokingVertex;
#define glProvokingVertex _glProvokingVertex
typedef GLsync(__stdcall* PFNGLFENCESYNCPROC)(GLenum condition, GLbitfield flags);
extern PFNGLFENCESYNCPROC _glFenceSync;
#define glFenceSync _glFenceSync
typedef GLboolean(__stdcall* PFNGLISSYNCPROC)(GLsync sync);
extern PFNGLISSYNCPROC _glIsSync;
#define glIsSync _glIsSync
typedef void(__stdcall* PFNGLDELETESYNCPROC)(GLsync sync);
extern PFNGLDELETESYNCPROC _glDeleteSync;
#define glDeleteSync _glDeleteSync
typedef GLenum(__stdcall* PFNGLCLIENTWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
extern PFNGLCLIENTWAITSYNCPROC _glClientWaitSync;
#define glClientWaitSync _glClientWaitSync
typedef void(__stdcall* PFNGLWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
extern PFNGLWAITSYNCPROC _glWaitSync;
#define glWaitSync _glWaitSync
typedef void(__stdcall* PFNGLGETINTEGER64VPROC)(GLenum pname, GLint64* data);
extern PFNGLGETINTEGER64VPROC _glGetInteger64v;
#define glGetInteger64v _glGetInteger64v
typedef void(__stdcall* PFNGLGETSYNCIVPROC)(GLsync sync, GLenum pname, GLsizei count, GLsizei* length, GLint* values);
extern PFNGLGETSYNCIVPROC _glGetSynciv;
#define glGetSynciv _glGetSynciv
typedef void(__stdcall* PFNGLGETINTEGER64I_VPROC)(GLenum target, GLuint index, GLint64* data);
extern PFNGLGETINTEGER64I_VPROC _glGetInteger64i_v;
#define glGetInteger64i_v _glGetInteger64i_v
typedef void(__stdcall* PFNGLGETBUFFERPARAMETERI64VPROC)(GLenum target, GLenum pname, GLint64* params);
extern PFNGLGETBUFFERPARAMETERI64VPROC _glGetBufferParameteri64v;
#define glGetBufferParameteri64v _glGetBufferParameteri64v
typedef void(__stdcall* PFNGLFRAMEBUFFERTEXTUREPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);
extern PFNGLFRAMEBUFFERTEXTUREPROC _glFramebufferTexture;
#define glFramebufferTexture _glFramebufferTexture
typedef void(__stdcall* PFNGLTEXIMAGE2DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
extern PFNGLTEXIMAGE2DMULTISAMPLEPROC _glTexImage2DMultisample;
#define glTexImage2DMultisample _glTexImage2DMultisample
typedef void(__stdcall* PFNGLTEXIMAGE3DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
extern PFNGLTEXIMAGE3DMULTISAMPLEPROC _glTexImage3DMultisample;
#define glTexImage3DMultisample _glTexImage3DMultisample
typedef void(__stdcall* PFNGLGETMULTISAMPLEFVPROC)(GLenum pname, GLuint index, GLfloat* val);
extern PFNGLGETMULTISAMPLEFVPROC _glGetMultisamplefv;
#define glGetMultisamplefv _glGetMultisamplefv
typedef void(__stdcall* PFNGLSAMPLEMASKIPROC)(GLuint maskNumber, GLbitfield mask);
extern PFNGLSAMPLEMASKIPROC _glSampleMaski;
#define glSampleMaski _glSampleMaski
#pragma endregion

#pragma region OpenGL 3.3 functions
typedef void(__stdcall* PFNGLBINDFRAGDATALOCATIONINDEXEDPROC)(GLuint program, GLuint colorNumber, GLuint index, const GLchar* name);
extern PFNGLBINDFRAGDATALOCATIONINDEXEDPROC _glBindFragDataLocationIndexed;
#define glBindFragDataLocationIndexed _glBindFragDataLocationIndexed
typedef GLint(__stdcall* PFNGLGETFRAGDATAINDEXPROC)(GLuint program, const GLchar* name);
extern PFNGLGETFRAGDATAINDEXPROC _glGetFragDataIndex;
#define glGetFragDataIndex _glGetFragDataIndex
typedef void(__stdcall* PFNGLGENSAMPLERSPROC)(GLsizei count, GLuint* samplers);
extern PFNGLGENSAMPLERSPROC _glGenSamplers;
#define glGenSamplers _glGenSamplers
typedef void(__stdcall* PFNGLDELETESAMPLERSPROC)(GLsizei count, const GLuint* samplers);
extern PFNGLDELETESAMPLERSPROC _glDeleteSamplers;
#define glDeleteSamplers _glDeleteSamplers
typedef GLboolean(__stdcall* PFNGLISSAMPLERPROC)(GLuint sampler);
extern PFNGLISSAMPLERPROC _glIsSampler;
#define glIsSampler _glIsSampler
typedef void(__stdcall* PFNGLBINDSAMPLERPROC)(GLuint unit, GLuint sampler);
extern PFNGLBINDSAMPLERPROC _glBindSampler;
#define glBindSampler _glBindSampler
typedef void(__stdcall* PFNGLSAMPLERPARAMETERIPROC)(GLuint sampler, GLenum pname, GLint param);
extern PFNGLSAMPLERPARAMETERIPROC _glSamplerParameteri;
#define glSamplerParameteri _glSamplerParameteri
typedef void(__stdcall* PFNGLSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, const GLint* param);
extern PFNGLSAMPLERPARAMETERIVPROC _glSamplerParameteriv;
#define glSamplerParameteriv _glSamplerParameteriv
typedef void(__stdcall* PFNGLSAMPLERPARAMETERFPROC)(GLuint sampler, GLenum pname, GLfloat param);
extern PFNGLSAMPLERPARAMETERFPROC _glSamplerParameterf;
#define glSamplerParameterf _glSamplerParameterf
typedef void(__stdcall* PFNGLSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, const GLfloat* param);
extern PFNGLSAMPLERPARAMETERFVPROC _glSamplerParameterfv;
#define glSamplerParameterfv _glSamplerParameterfv
typedef void(__stdcall* PFNGLSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, const GLint* param);
extern PFNGLSAMPLERPARAMETERIIVPROC _glSamplerParameterIiv;
#define glSamplerParameterIiv _glSamplerParameterIiv
typedef void(__stdcall* PFNGLSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, const GLuint* param);
extern PFNGLSAMPLERPARAMETERIUIVPROC _glSamplerParameterIuiv;
#define glSamplerParameterIuiv _glSamplerParameterIuiv
typedef void(__stdcall* PFNGLGETSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, GLint* params);
extern PFNGLGETSAMPLERPARAMETERIVPROC _glGetSamplerParameteriv;
#define glGetSamplerParameteriv _glGetSamplerParameteriv
typedef void(__stdcall* PFNGLGETSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, GLint* params);
extern PFNGLGETSAMPLERPARAMETERIIVPROC _glGetSamplerParameterIiv;
#define glGetSamplerParameterIiv _glGetSamplerParameterIiv
typedef void(__stdcall* PFNGLGETSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, GLfloat* params);
extern PFNGLGETSAMPLERPARAMETERFVPROC _glGetSamplerParameterfv;
#define glGetSamplerParameterfv _glGetSamplerParameterfv
typedef void(__stdcall* PFNGLGETSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, GLuint* params);
extern PFNGLGETSAMPLERPARAMETERIUIVPROC _glGetSamplerParameterIuiv;
#define glGetSamplerParameterIuiv _glGetSamplerParameterIuiv
typedef void(__stdcall* PFNGLQUERYCOUNTERPROC)(GLuint id, GLenum target);
extern PFNGLQUERYCOUNTERPROC _glQueryCounter;
#define glQueryCounter _glQueryCounter
typedef void(__stdcall* PFNGLGETQUERYOBJECTI64VPROC)(GLuint id, GLenum pname, GLint64* params);
extern PFNGLGETQUERYOBJECTI64VPROC _glGetQueryObjecti64v;
#define glGetQueryObjecti64v _glGetQueryObjecti64v
typedef void(__stdcall* PFNGLGETQUERYOBJECTUI64VPROC)(GLuint id, GLenum pname, GLuint64* params);
extern PFNGLGETQUERYOBJECTUI64VPROC _glGetQueryObjectui64v;
#define glGetQueryObjectui64v _glGetQueryObjectui64v
typedef void(__stdcall* PFNGLVERTEXATTRIBDIVISORPROC)(GLuint index, GLuint divisor);
extern PFNGLVERTEXATTRIBDIVISORPROC _glVertexAttribDivisor;
#define glVertexAttribDivisor _glVertexAttribDivisor
typedef void(__stdcall* PFNGLVERTEXATTRIBP1UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
extern PFNGLVERTEXATTRIBP1UIPROC _glVertexAttribP1ui;
#define glVertexAttribP1ui _glVertexAttribP1ui
typedef void(__stdcall* PFNGLVERTEXATTRIBP1UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
extern PFNGLVERTEXATTRIBP1UIVPROC _glVertexAttribP1uiv;
#define glVertexAttribP1uiv _glVertexAttribP1uiv
typedef void(__stdcall* PFNGLVERTEXATTRIBP2UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
extern PFNGLVERTEXATTRIBP2UIPROC _glVertexAttribP2ui;
#define glVertexAttribP2ui _glVertexAttribP2ui
typedef void(__stdcall* PFNGLVERTEXATTRIBP2UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
extern PFNGLVERTEXATTRIBP2UIVPROC _glVertexAttribP2uiv;
#define glVertexAttribP2uiv _glVertexAttribP2uiv
typedef void(__stdcall* PFNGLVERTEXATTRIBP3UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
extern PFNGLVERTEXATTRIBP3UIPROC _glVertexAttribP3ui;
#define glVertexAttribP3ui _glVertexAttribP3ui
typedef void(__stdcall* PFNGLVERTEXATTRIBP3UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
extern PFNGLVERTEXATTRIBP3UIVPROC _glVertexAttribP3uiv;
#define glVertexAttribP3uiv _glVertexAttribP3uiv
typedef void(__stdcall* PFNGLVERTEXATTRIBP4UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
extern PFNGLVERTEXATTRIBP4UIPROC _glVertexAttribP4ui;
#define glVertexAttribP4ui _glVertexAttribP4ui
typedef void(__stdcall* PFNGLVERTEXATTRIBP4UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
extern PFNGLVERTEXATTRIBP4UIVPROC _glVertexAttribP4uiv;
#define glVertexAttribP4uiv _glVertexAttribP4uiv
typedef void(__stdcall* PFNGLVERTEXP2UIPROC)(GLenum type, GLuint value);
extern PFNGLVERTEXP2UIPROC _glVertexP2ui;
#define glVertexP2ui _glVertexP2ui
typedef void(__stdcall* PFNGLVERTEXP2UIVPROC)(GLenum type, const GLuint* value);
extern PFNGLVERTEXP2UIVPROC _glVertexP2uiv;
#define glVertexP2uiv _glVertexP2uiv
typedef void(__stdcall* PFNGLVERTEXP3UIPROC)(GLenum type, GLuint value);
extern PFNGLVERTEXP3UIPROC _glVertexP3ui;
#define glVertexP3ui _glVertexP3ui
typedef void(__stdcall* PFNGLVERTEXP3UIVPROC)(GLenum type, const GLuint* value);
extern PFNGLVERTEXP3UIVPROC _glVertexP3uiv;
#define glVertexP3uiv _glVertexP3uiv
typedef void(__stdcall* PFNGLVERTEXP4UIPROC)(GLenum type, GLuint value);
extern PFNGLVERTEXP4UIPROC _glVertexP4ui;
#define glVertexP4ui _glVertexP4ui
typedef void(__stdcall* PFNGLVERTEXP4UIVPROC)(GLenum type, const GLuint* value);
extern PFNGLVERTEXP4UIVPROC _glVertexP4uiv;
#define glVertexP4uiv _glVertexP4uiv
typedef void(__stdcall* PFNGLTEXCOORDP1UIPROC)(GLenum type, GLuint coords);
extern PFNGLTEXCOORDP1UIPROC _glTexCoordP1ui;
#define glTexCoordP1ui _glTexCoordP1ui
typedef void(__stdcall* PFNGLTEXCOORDP1UIVPROC)(GLenum type, const GLuint* coords);
extern PFNGLTEXCOORDP1UIVPROC _glTexCoordP1uiv;
#define glTexCoordP1uiv _glTexCoordP1uiv
typedef void(__stdcall* PFNGLTEXCOORDP2UIPROC)(GLenum type, GLuint coords);
extern PFNGLTEXCOORDP2UIPROC _glTexCoordP2ui;
#define glTexCoordP2ui _glTexCoordP2ui
typedef void(__stdcall* PFNGLTEXCOORDP2UIVPROC)(GLenum type, const GLuint* coords);
extern PFNGLTEXCOORDP2UIVPROC _glTexCoordP2uiv;
#define glTexCoordP2uiv _glTexCoordP2uiv
typedef void(__stdcall* PFNGLTEXCOORDP3UIPROC)(GLenum type, GLuint coords);
extern PFNGLTEXCOORDP3UIPROC _glTexCoordP3ui;
#define glTexCoordP3ui _glTexCoordP3ui
typedef void(__stdcall* PFNGLTEXCOORDP3UIVPROC)(GLenum type, const GLuint* coords);
extern PFNGLTEXCOORDP3UIVPROC _glTexCoordP3uiv;
#define glTexCoordP3uiv _glTexCoordP3uiv
typedef void(__stdcall* PFNGLTEXCOORDP4UIPROC)(GLenum type, GLuint coords);
extern PFNGLTEXCOORDP4UIPROC _glTexCoordP4ui;
#define glTexCoordP4ui _glTexCoordP4ui
typedef void(__stdcall* PFNGLTEXCOORDP4UIVPROC)(GLenum type, const GLuint* coords);
extern PFNGLTEXCOORDP4UIVPROC _glTexCoordP4uiv;
#define glTexCoordP4uiv _glTexCoordP4uiv
typedef void(__stdcall* PFNGLMULTITEXCOORDP1UIPROC)(GLenum texture, GLenum type, GLuint coords);
extern PFNGLMULTITEXCOORDP1UIPROC _glMultiTexCoordP1ui;
#define glMultiTexCoordP1ui _glMultiTexCoordP1ui
typedef void(__stdcall* PFNGLMULTITEXCOORDP1UIVPROC)(GLenum texture, GLenum type, const GLuint* coords);
extern PFNGLMULTITEXCOORDP1UIVPROC _glMultiTexCoordP1uiv;
#define glMultiTexCoordP1uiv _glMultiTexCoordP1uiv
typedef void(__stdcall* PFNGLMULTITEXCOORDP2UIPROC)(GLenum texture, GLenum type, GLuint coords);
extern PFNGLMULTITEXCOORDP2UIPROC _glMultiTexCoordP2ui;
#define glMultiTexCoordP2ui _glMultiTexCoordP2ui
typedef void(__stdcall* PFNGLMULTITEXCOORDP2UIVPROC)(GLenum texture, GLenum type, const GLuint* coords);
extern PFNGLMULTITEXCOORDP2UIVPROC _glMultiTexCoordP2uiv;
#define glMultiTexCoordP2uiv _glMultiTexCoordP2uiv
typedef void(__stdcall* PFNGLMULTITEXCOORDP3UIPROC)(GLenum texture, GLenum type, GLuint coords);
extern PFNGLMULTITEXCOORDP3UIPROC _glMultiTexCoordP3ui;
#define glMultiTexCoordP3ui _glMultiTexCoordP3ui
typedef void(__stdcall* PFNGLMULTITEXCOORDP3UIVPROC)(GLenum texture, GLenum type, const GLuint* coords);
extern PFNGLMULTITEXCOORDP3UIVPROC _glMultiTexCoordP3uiv;
#define glMultiTexCoordP3uiv _glMultiTexCoordP3uiv
typedef void(__stdcall* PFNGLMULTITEXCOORDP4UIPROC)(GLenum texture, GLenum type, GLuint coords);
extern PFNGLMULTITEXCOORDP4UIPROC _glMultiTexCoordP4ui;
#define glMultiTexCoordP4ui _glMultiTexCoordP4ui
typedef void(__stdcall* PFNGLMULTITEXCOORDP4UIVPROC)(GLenum texture, GLenum type, const GLuint* coords);
extern PFNGLMULTITEXCOORDP4UIVPROC _glMultiTexCoordP4uiv;
#define glMultiTexCoordP4uiv _glMultiTexCoordP4uiv
typedef void(__stdcall* PFNGLNORMALP3UIPROC)(GLenum type, GLuint coords);
extern PFNGLNORMALP3UIPROC _glNormalP3ui;
#define glNormalP3ui _glNormalP3ui
typedef void(__stdcall* PFNGLNORMALP3UIVPROC)(GLenum type, const GLuint* coords);
extern PFNGLNORMALP3UIVPROC _glNormalP3uiv;
#define glNormalP3uiv _glNormalP3uiv
typedef void(__stdcall* PFNGLCOLORP3UIPROC)(GLenum type, GLuint color);
extern PFNGLCOLORP3UIPROC _glColorP3ui;
#define glColorP3ui _glColorP3ui
typedef void(__stdcall* PFNGLCOLORP3UIVPROC)(GLenum type, const GLuint* color);
extern PFNGLCOLORP3UIVPROC _glColorP3uiv;
#define glColorP3uiv _glColorP3uiv
typedef void(__stdcall* PFNGLCOLORP4UIPROC)(GLenum type, GLuint color);
extern PFNGLCOLORP4UIPROC _glColorP4ui;
#define glColorP4ui _glColorP4ui
typedef void(__stdcall* PFNGLCOLORP4UIVPROC)(GLenum type, const GLuint* color);
extern PFNGLCOLORP4UIVPROC _glColorP4uiv;
#define glColorP4uiv _glColorP4uiv
typedef void(__stdcall* PFNGLSECONDARYCOLORP3UIPROC)(GLenum type, GLuint color);
extern PFNGLSECONDARYCOLORP3UIPROC _glSecondaryColorP3ui;
#define glSecondaryColorP3ui _glSecondaryColorP3ui
typedef void(__stdcall* PFNGLSECONDARYCOLORP3UIVPROC)(GLenum type, const GLuint* color);
extern PFNGLSECONDARYCOLORP3UIVPROC _glSecondaryColorP3uiv;
#define glSecondaryColorP3uiv _glSecondaryColorP3uiv
#pragma endregion

#pragma region WGL extensions
typedef HGLRC(WINAPI* PFNWGLCREATECONTEXTATTRIBSARBPROC)(HDC hdc, HGLRC hShareContext, const int* attribList);
extern PFNWGLCREATECONTEXTATTRIBSARBPROC _wglCreateContextAttribsARB;
#define wglCreateContextAttribsARB _wglCreateContextAttribsARB
typedef BOOL(WINAPI* PFNWGLCHOOSEPIXELFOTMATARBPROC)(HDC hdc, const int* piAttribIList, const FLOAT* pfAttribFList, UINT nMaxFormats, int* piFormats, UINT* nNumFormats);
extern PFNWGLCHOOSEPIXELFOTMATARBPROC _wglChoosePixelFormatARB;
#define wglChoosePixelFormatARB _wglChoosePixelFormatARB
#pragma endregion

#ifdef __cplusplus
}
#endif // extern "C"

namespace monk::utils
{
	enum class OpenGLVersion
	{
		OPENGL_1_0 = 0,
		OPENGL_1_1,
		OPENGL_1_2,
		OPENGL_1_3,
		OPENGL_1_4,
		OPENGL_1_5,
		OPENGL_2_0,
		OPENGL_2_1,
		OPENGL_3_0,
		OPENGL_3_1,
		OPENGL_3_2,
		OPENGL_3_3,
		OPENGL_VERSION_COUNT
	};

	class OpenGLLoader
	{
	public:
		static bool LoadOpenGL(OpenGLVersion version);

	private:
		OpenGLLoader() = default;
		~OpenGLLoader() = default;

	private:
		friend class Window;
		static void* LoadFunction(const char* name);

		static void LoadOpenGL_1_0();
		static void LoadOpenGL_1_1();
		static void LoadOpenGL_1_2();
		static void LoadOpenGL_1_3();
		static void LoadOpenGL_1_4();
		static void LoadOpenGL_1_5();
		static void LoadOpenGL_2_0();
		static void LoadOpenGL_2_1();
		static void LoadOpenGL_3_0();
		static void LoadOpenGL_3_1();
		static void LoadOpenGL_3_2();
		static void LoadOpenGL_3_3();

	private:
		static HMODULE s_OpenGLLib;
	};
}
